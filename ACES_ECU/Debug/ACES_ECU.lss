
ACES_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800200  00000ca8  00000d3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ca8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  0080020a  0080020a  00000d46  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d46  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d78  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000db8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b92  00000000  00000000  00000ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ee5  00000000  00000000  00002a62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b88  00000000  00000000  00003947  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000314  00000000  00000000  000044d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006f3  00000000  00000000  000047e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008fe  00000000  00000000  00004ed7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  000057d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	65 c0       	rjmp	.+202    	; 0xcc <__ctors_end>
   2:	00 00       	nop
   4:	82 c0       	rjmp	.+260    	; 0x10a <__bad_interrupt>
   6:	00 00       	nop
   8:	80 c0       	rjmp	.+256    	; 0x10a <__bad_interrupt>
   a:	00 00       	nop
   c:	34 c3       	rjmp	.+1640   	; 0x676 <__vector_3>
   e:	00 00       	nop
  10:	7c c0       	rjmp	.+248    	; 0x10a <__bad_interrupt>
  12:	00 00       	nop
  14:	7a c0       	rjmp	.+244    	; 0x10a <__bad_interrupt>
  16:	00 00       	nop
  18:	78 c0       	rjmp	.+240    	; 0x10a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	76 c0       	rjmp	.+236    	; 0x10a <__bad_interrupt>
  1e:	00 00       	nop
  20:	74 c0       	rjmp	.+232    	; 0x10a <__bad_interrupt>
  22:	00 00       	nop
  24:	72 c0       	rjmp	.+228    	; 0x10a <__bad_interrupt>
  26:	00 00       	nop
  28:	70 c0       	rjmp	.+224    	; 0x10a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6e c0       	rjmp	.+220    	; 0x10a <__bad_interrupt>
  2e:	00 00       	nop
  30:	6c c0       	rjmp	.+216    	; 0x10a <__bad_interrupt>
  32:	00 00       	nop
  34:	6a c0       	rjmp	.+212    	; 0x10a <__bad_interrupt>
  36:	00 00       	nop
  38:	68 c0       	rjmp	.+208    	; 0x10a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	66 c0       	rjmp	.+204    	; 0x10a <__bad_interrupt>
  3e:	00 00       	nop
  40:	64 c0       	rjmp	.+200    	; 0x10a <__bad_interrupt>
  42:	00 00       	nop
  44:	62 c0       	rjmp	.+196    	; 0x10a <__bad_interrupt>
  46:	00 00       	nop
  48:	60 c0       	rjmp	.+192    	; 0x10a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5e c0       	rjmp	.+188    	; 0x10a <__bad_interrupt>
  4e:	00 00       	nop
  50:	5c c0       	rjmp	.+184    	; 0x10a <__bad_interrupt>
  52:	00 00       	nop
  54:	5a c0       	rjmp	.+180    	; 0x10a <__bad_interrupt>
  56:	00 00       	nop
  58:	58 c0       	rjmp	.+176    	; 0x10a <__bad_interrupt>
  5a:	00 00       	nop
  5c:	56 c0       	rjmp	.+172    	; 0x10a <__bad_interrupt>
  5e:	00 00       	nop
  60:	54 c0       	rjmp	.+168    	; 0x10a <__bad_interrupt>
  62:	00 00       	nop
  64:	1a c2       	rjmp	.+1076   	; 0x49a <__vector_25>
  66:	00 00       	nop
  68:	50 c0       	rjmp	.+160    	; 0x10a <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4e c0       	rjmp	.+156    	; 0x10a <__bad_interrupt>
  6e:	00 00       	nop
  70:	4c c0       	rjmp	.+152    	; 0x10a <__bad_interrupt>
  72:	00 00       	nop
  74:	4a c0       	rjmp	.+148    	; 0x10a <__bad_interrupt>
  76:	00 00       	nop
  78:	48 c0       	rjmp	.+144    	; 0x10a <__bad_interrupt>
  7a:	00 00       	nop
  7c:	46 c0       	rjmp	.+140    	; 0x10a <__bad_interrupt>
  7e:	00 00       	nop
  80:	44 c0       	rjmp	.+136    	; 0x10a <__bad_interrupt>
  82:	00 00       	nop
  84:	42 c0       	rjmp	.+132    	; 0x10a <__bad_interrupt>
  86:	00 00       	nop
  88:	40 c0       	rjmp	.+128    	; 0x10a <__bad_interrupt>
  8a:	00 00       	nop
  8c:	05 c3       	rjmp	.+1546   	; 0x698 <__vector_35>
  8e:	00 00       	nop
  90:	3c c0       	rjmp	.+120    	; 0x10a <__bad_interrupt>
  92:	00 00       	nop
  94:	3a c0       	rjmp	.+116    	; 0x10a <__bad_interrupt>
  96:	00 00       	nop
  98:	38 c0       	rjmp	.+112    	; 0x10a <__bad_interrupt>
  9a:	00 00       	nop
  9c:	36 c0       	rjmp	.+108    	; 0x10a <__bad_interrupt>
  9e:	00 00       	nop
  a0:	34 c0       	rjmp	.+104    	; 0x10a <__bad_interrupt>
  a2:	00 00       	nop
  a4:	32 c0       	rjmp	.+100    	; 0x10a <__bad_interrupt>
  a6:	00 00       	nop
  a8:	30 c0       	rjmp	.+96     	; 0x10a <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2e c0       	rjmp	.+92     	; 0x10a <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2c c0       	rjmp	.+88     	; 0x10a <__bad_interrupt>
  b2:	00 00       	nop
  b4:	33 c3       	rjmp	.+1638   	; 0x71c <__vector_45>
  b6:	00 00       	nop
  b8:	28 c0       	rjmp	.+80     	; 0x10a <__bad_interrupt>
  ba:	00 00       	nop
  bc:	26 c0       	rjmp	.+76     	; 0x10a <__bad_interrupt>
  be:	00 00       	nop
  c0:	24 c0       	rjmp	.+72     	; 0x10a <__bad_interrupt>
  c2:	00 00       	nop
  c4:	22 c0       	rjmp	.+68     	; 0x10a <__bad_interrupt>
  c6:	00 00       	nop
  c8:	60 c3       	rjmp	.+1728   	; 0x78a <__vector_50>
	...

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d1 e2       	ldi	r29, 0x21	; 33
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61
  d8:	00 e0       	ldi	r16, 0x00	; 0
  da:	0c bf       	out	0x3c, r16	; 60

000000dc <__do_copy_data>:
  dc:	12 e0       	ldi	r17, 0x02	; 2
  de:	a0 e0       	ldi	r26, 0x00	; 0
  e0:	b2 e0       	ldi	r27, 0x02	; 2
  e2:	e8 ea       	ldi	r30, 0xA8	; 168
  e4:	fc e0       	ldi	r31, 0x0C	; 12
  e6:	00 e0       	ldi	r16, 0x00	; 0
  e8:	0b bf       	out	0x3b, r16	; 59
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <__do_copy_data+0x14>
  ec:	07 90       	elpm	r0, Z+
  ee:	0d 92       	st	X+, r0
  f0:	aa 30       	cpi	r26, 0x0A	; 10
  f2:	b1 07       	cpc	r27, r17
  f4:	d9 f7       	brne	.-10     	; 0xec <__do_copy_data+0x10>

000000f6 <__do_clear_bss>:
  f6:	22 e0       	ldi	r18, 0x02	; 2
  f8:	aa e0       	ldi	r26, 0x0A	; 10
  fa:	b2 e0       	ldi	r27, 0x02	; 2
  fc:	01 c0       	rjmp	.+2      	; 0x100 <.do_clear_bss_start>

000000fe <.do_clear_bss_loop>:
  fe:	1d 92       	st	X+, r1

00000100 <.do_clear_bss_start>:
 100:	a8 32       	cpi	r26, 0x28	; 40
 102:	b2 07       	cpc	r27, r18
 104:	e1 f7       	brne	.-8      	; 0xfe <.do_clear_bss_loop>
 106:	95 d3       	rcall	.+1834   	; 0x832 <main>
 108:	cd c5       	rjmp	.+2970   	; 0xca4 <_exit>

0000010a <__bad_interrupt>:
 10a:	7a cf       	rjmp	.-268    	; 0x0 <__vectors>

0000010c <SPI_Transmit>:
 *
 *  @param char The byte that is going to be sent to the ESB
 *  @return char The received byte from the ESB
 */
char SPI_Transmit(char info)
{
 10c:	cf 93       	push	r28
 10e:	c8 2f       	mov	r28, r24
	// First wait for an empty transmit buffer
	while (! (UCSR1A & (1 << UDRE1)) );
 110:	e8 ec       	ldi	r30, 0xC8	; 200
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	85 ff       	sbrs	r24, 5
 118:	fd cf       	rjmp	.-6      	; 0x114 <SPI_Transmit+0x8>
	
	// Then drive the SS low
	assign_bit(&PORTC, ESB_SS, 0);           // Pull low to start the communication
 11a:	40 e0       	ldi	r20, 0x00	; 0
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	88 e2       	ldi	r24, 0x28	; 40
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	e2 d2       	rcall	.+1476   	; 0x6e8 <assign_bit>
	
	// Now begin timer 5
	TCCR5B = (1 << CS51) | (1 << CS50);      // start timer 5 with prescalar of 64
 124:	83 e0       	ldi	r24, 0x03	; 3
 126:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>

	// Now put the data into the buffer, this should send the data too
	UDR1 = info;
 12a:	c0 93 ce 00 	sts	0x00CE, r28	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
	
	// Now wait for the data to be received
	while ( !(UCSR1A & (1 << RXC1)) );
 12e:	e8 ec       	ldi	r30, 0xC8	; 200
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	88 23       	and	r24, r24
 136:	ec f7       	brge	.-6      	; 0x132 <SPI_Transmit+0x26>
	assign_bit(&PORTC, ESB_SS, 1);           // Pull high to stop communication
 138:	41 e0       	ldi	r20, 0x01	; 1
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	88 e2       	ldi	r24, 0x28	; 40
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	d3 d2       	rcall	.+1446   	; 0x6e8 <assign_bit>
	assign_bit(&TCCR5B, CS51, 0);
 142:	40 e0       	ldi	r20, 0x00	; 0
 144:	61 e0       	ldi	r22, 0x01	; 1
 146:	81 e2       	ldi	r24, 0x21	; 33
 148:	91 e0       	ldi	r25, 0x01	; 1
 14a:	ce d2       	rcall	.+1436   	; 0x6e8 <assign_bit>
	assign_bit(&TCCR5B, CS50, 0);            // turn off the timer
 14c:	40 e0       	ldi	r20, 0x00	; 0
 14e:	60 e0       	ldi	r22, 0x00	; 0
 150:	81 e2       	ldi	r24, 0x21	; 33
 152:	91 e0       	ldi	r25, 0x01	; 1
 154:	c9 d2       	rcall	.+1426   	; 0x6e8 <assign_bit>
	TCNT5 = 40536;
 156:	88 e5       	ldi	r24, 0x58	; 88
 158:	9e e9       	ldi	r25, 0x9E	; 158
 15a:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <__TEXT_REGION_LENGTH__+0x700125>
 15e:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
	return UDR1;
 162:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
}
 166:	cf 91       	pop	r28
 168:	08 95       	ret

0000016a <ESB_Connect>:
 *
 *  @param void
 *  @return void
 */
void ESB_Connect(void)
{
 16a:	9f 92       	push	r9
 16c:	af 92       	push	r10
 16e:	bf 92       	push	r11
 170:	cf 92       	push	r12
 172:	df 92       	push	r13
 174:	ef 92       	push	r14
 176:	ff 92       	push	r15
 178:	0f 93       	push	r16
 17a:	1f 93       	push	r17
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	cd b7       	in	r28, 0x3d	; 61
 182:	de b7       	in	r29, 0x3e	; 62
 184:	2a 97       	sbiw	r28, 0x0a	; 10
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	f8 94       	cli
 18a:	de bf       	out	0x3e, r29	; 62
 18c:	0f be       	out	0x3f, r0	; 63
 18e:	cd bf       	out	0x3d, r28	; 61
	char message[] = "ACES";
 190:	85 e0       	ldi	r24, 0x05	; 5
 192:	e5 e0       	ldi	r30, 0x05	; 5
 194:	f2 e0       	ldi	r31, 0x02	; 2
 196:	de 01       	movw	r26, r28
 198:	11 96       	adiw	r26, 0x01	; 1
 19a:	01 90       	ld	r0, Z+
 19c:	0d 92       	st	X+, r0
 19e:	8a 95       	dec	r24
 1a0:	e1 f7       	brne	.-8      	; 0x19a <ESB_Connect+0x30>
	char receive[5];              // this is the receive buffer
	char done = 0;
	while (!done){
		for (unsigned char i = 0; i <= strlen(message); i++){   // the equals sign will ensure that the terminator is sent
			receive[i] = SPI_Transmit(message[i]);
 1a2:	ce 01       	movw	r24, r28
 1a4:	01 96       	adiw	r24, 0x01	; 1
 1a6:	7c 01       	movw	r14, r24
 1a8:	6e 01       	movw	r12, r28
 1aa:	96 e0       	ldi	r25, 0x06	; 6
 1ac:	c9 0e       	add	r12, r25
 1ae:	d1 1c       	adc	r13, r1
 1b0:	9c 2c       	mov	r9, r12
 1b2:	ad 2c       	mov	r10, r13
 1b4:	1f c0       	rjmp	.+62     	; 0x1f4 <ESB_Connect+0x8a>
 1b6:	0b 2d       	mov	r16, r11
 1b8:	10 e0       	ldi	r17, 0x00	; 0
 1ba:	f7 01       	movw	r30, r14
 1bc:	e0 0f       	add	r30, r16
 1be:	f1 1f       	adc	r31, r17
 1c0:	80 81       	ld	r24, Z
 1c2:	a4 df       	rcall	.-184    	; 0x10c <SPI_Transmit>
 1c4:	f6 01       	movw	r30, r12
 1c6:	e0 0f       	add	r30, r16
 1c8:	f1 1f       	adc	r31, r17
 1ca:	80 83       	st	Z, r24
{
	char message[] = "ACES";
	char receive[5];              // this is the receive buffer
	char done = 0;
	while (!done){
		for (unsigned char i = 0; i <= strlen(message); i++){   // the equals sign will ensure that the terminator is sent
 1cc:	b3 94       	inc	r11
 1ce:	f7 01       	movw	r30, r14
 1d0:	01 90       	ld	r0, Z+
 1d2:	00 20       	and	r0, r0
 1d4:	e9 f7       	brne	.-6      	; 0x1d0 <ESB_Connect+0x66>
 1d6:	31 97       	sbiw	r30, 0x01	; 1
 1d8:	ee 19       	sub	r30, r14
 1da:	ff 09       	sbc	r31, r15
 1dc:	8b 2d       	mov	r24, r11
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	e8 17       	cp	r30, r24
 1e2:	f9 07       	cpc	r31, r25
 1e4:	40 f7       	brcc	.-48     	; 0x1b6 <ESB_Connect+0x4c>
			receive[i] = SPI_Transmit(message[i]);
		}
		// now compare to the pass phrase
		if (!strcmp(receive, "DALE")){
 1e6:	60 e0       	ldi	r22, 0x00	; 0
 1e8:	72 e0       	ldi	r23, 0x02	; 2
 1ea:	89 2d       	mov	r24, r9
 1ec:	9a 2d       	mov	r25, r10
 1ee:	51 d5       	rcall	.+2722   	; 0xc92 <strcmp>
 1f0:	89 2b       	or	r24, r25
 1f2:	11 f0       	breq	.+4      	; 0x1f8 <ESB_Connect+0x8e>
 *
 *  @param void
 *  @return void
 */
void ESB_Connect(void)
{
 1f4:	b1 2c       	mov	r11, r1
 1f6:	df cf       	rjmp	.-66     	; 0x1b6 <ESB_Connect+0x4c>
		if (!strcmp(receive, "DALE")){
			done = 1;
		}
	}
	
}
 1f8:	2a 96       	adiw	r28, 0x0a	; 10
 1fa:	0f b6       	in	r0, 0x3f	; 63
 1fc:	f8 94       	cli
 1fe:	de bf       	out	0x3e, r29	; 62
 200:	0f be       	out	0x3f, r0	; 63
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df 91       	pop	r29
 206:	cf 91       	pop	r28
 208:	1f 91       	pop	r17
 20a:	0f 91       	pop	r16
 20c:	ff 90       	pop	r15
 20e:	ef 90       	pop	r14
 210:	df 90       	pop	r13
 212:	cf 90       	pop	r12
 214:	bf 90       	pop	r11
 216:	af 90       	pop	r10
 218:	9f 90       	pop	r9
 21a:	08 95       	ret

0000021c <GUI_Connect>:
 *
 *  @param void
 *  @return void
 */
void GUI_Connect(void)
{
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
 220:	00 d0       	rcall	.+0      	; 0x222 <GUI_Connect+0x6>
 222:	1f 92       	push	r1
 224:	1f 92       	push	r1
 226:	cd b7       	in	r28, 0x3d	; 61
 228:	de b7       	in	r29, 0x3e	; 62
	char message[] = "DALE";
 22a:	85 e0       	ldi	r24, 0x05	; 5
 22c:	e0 e0       	ldi	r30, 0x00	; 0
 22e:	f2 e0       	ldi	r31, 0x02	; 2
 230:	de 01       	movw	r26, r28
 232:	11 96       	adiw	r26, 0x01	; 1
 234:	01 90       	ld	r0, Z+
 236:	0d 92       	st	X+, r0
 238:	8a 95       	dec	r24
 23a:	e1 f7       	brne	.-8      	; 0x234 <GUI_Connect+0x18>
 23c:	be 01       	movw	r22, r28
 23e:	6f 5f       	subi	r22, 0xFF	; 255
 240:	7f 4f       	sbci	r23, 0xFF	; 255
 242:	ae 01       	movw	r20, r28
 244:	4a 5f       	subi	r20, 0xFA	; 250
 246:	5f 4f       	sbci	r21, 0xFF	; 255
	for (uint8_t i = 0; i < 5; i++){                // This will also send the terminator
		/* Wait for empty transmit buffer */
		while ( !( UCSR0A & (1<<UDRE0)) );
 248:	e0 ec       	ldi	r30, 0xC0	; 192
 24a:	f0 e0       	ldi	r31, 0x00	; 0
		/* Put data into buffer, sends the data */
		UDR0 = message[i];
 24c:	26 ec       	ldi	r18, 0xC6	; 198
 24e:	30 e0       	ldi	r19, 0x00	; 0
void GUI_Connect(void)
{
	char message[] = "DALE";
	for (uint8_t i = 0; i < 5; i++){                // This will also send the terminator
		/* Wait for empty transmit buffer */
		while ( !( UCSR0A & (1<<UDRE0)) );
 250:	80 81       	ld	r24, Z
 252:	85 ff       	sbrs	r24, 5
 254:	fd cf       	rjmp	.-6      	; 0x250 <GUI_Connect+0x34>
		/* Put data into buffer, sends the data */
		UDR0 = message[i];
 256:	db 01       	movw	r26, r22
 258:	8d 91       	ld	r24, X+
 25a:	bd 01       	movw	r22, r26
 25c:	d9 01       	movw	r26, r18
 25e:	8c 93       	st	X, r24
 *  @return void
 */
void GUI_Connect(void)
{
	char message[] = "DALE";
	for (uint8_t i = 0; i < 5; i++){                // This will also send the terminator
 260:	64 17       	cp	r22, r20
 262:	75 07       	cpc	r23, r21
 264:	a9 f7       	brne	.-22     	; 0x250 <GUI_Connect+0x34>
		/* Wait for empty transmit buffer */
		while ( !( UCSR0A & (1<<UDRE0)) );
		/* Put data into buffer, sends the data */
		UDR0 = message[i];
	}
	connected = 1;
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <connected>
}
 26c:	0f 90       	pop	r0
 26e:	0f 90       	pop	r0
 270:	0f 90       	pop	r0
 272:	0f 90       	pop	r0
 274:	0f 90       	pop	r0
 276:	df 91       	pop	r29
 278:	cf 91       	pop	r28
 27a:	08 95       	ret

0000027c <sendToLaptop>:
 *
 *  @param void
 *  @return void
 */
void sendToLaptop(void)
{
 27c:	cf 93       	push	r28
 27e:	df 93       	push	r29
 280:	cd b7       	in	r28, 0x3d	; 61
 282:	de b7       	in	r29, 0x3e	; 62
 284:	2e 97       	sbiw	r28, 0x0e	; 14
 286:	0f b6       	in	r0, 0x3f	; 63
 288:	f8 94       	cli
 28a:	de bf       	out	0x3e, r29	; 62
 28c:	0f be       	out	0x3f, r0	; 63
 28e:	cd bf       	out	0x3d, r28	; 61
	// This function will be responsible for packaging and sending the desired data to the Windows GUI
	char message[14];              // this is the base length of the message
	// now fill the message
	
	if (opMode == 0){
 290:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <opMode>
 294:	81 11       	cpse	r24, r1
 296:	03 c0       	rjmp	.+6      	; 0x29e <sendToLaptop+0x22>
		message[0] = 'H';          // This means that the engine is just sitting there not doing anything
 298:	88 e4       	ldi	r24, 0x48	; 72
 29a:	89 83       	std	Y+1, r24	; 0x01
 29c:	18 c0       	rjmp	.+48     	; 0x2ce <sendToLaptop+0x52>
	}
	else if(opMode == 1){
 29e:	81 30       	cpi	r24, 0x01	; 1
 2a0:	19 f4       	brne	.+6      	; 0x2a8 <sendToLaptop+0x2c>
		message[0] = 'S';          // This means that the engine is trying to stop
 2a2:	83 e5       	ldi	r24, 0x53	; 83
 2a4:	89 83       	std	Y+1, r24	; 0x01
 2a6:	13 c0       	rjmp	.+38     	; 0x2ce <sendToLaptop+0x52>
	}
	else if(opMode == 2){
 2a8:	82 30       	cpi	r24, 0x02	; 2
 2aa:	19 f4       	brne	.+6      	; 0x2b2 <sendToLaptop+0x36>
		message[0] = 'r';          // This means that the engine is trying to start
 2ac:	82 e7       	ldi	r24, 0x72	; 114
 2ae:	89 83       	std	Y+1, r24	; 0x01
 2b0:	0e c0       	rjmp	.+28     	; 0x2ce <sendToLaptop+0x52>
	}
	else if(opMode == 3){
 2b2:	83 30       	cpi	r24, 0x03	; 3
 2b4:	19 f4       	brne	.+6      	; 0x2bc <sendToLaptop+0x40>
		message[0] = 'N';          // This means that the engine is running nominally
 2b6:	8e e4       	ldi	r24, 0x4E	; 78
 2b8:	89 83       	std	Y+1, r24	; 0x01
 2ba:	09 c0       	rjmp	.+18     	; 0x2ce <sendToLaptop+0x52>
	}
	else if(opMode == 4){
 2bc:	84 30       	cpi	r24, 0x04	; 4
 2be:	19 f4       	brne	.+6      	; 0x2c6 <sendToLaptop+0x4a>
		message[0] = 't';          // This means that the engine is changing to desired throttle
 2c0:	84 e7       	ldi	r24, 0x74	; 116
 2c2:	89 83       	std	Y+1, r24	; 0x01
 2c4:	04 c0       	rjmp	.+8      	; 0x2ce <sendToLaptop+0x52>
	}
	else if(opMode == 5){
 2c6:	85 30       	cpi	r24, 0x05	; 5
 2c8:	11 f4       	brne	.+4      	; 0x2ce <sendToLaptop+0x52>
		message[0] = 'E';          // This means that the ESB has been disconnected
 2ca:	85 e4       	ldi	r24, 0x45	; 69
 2cc:	89 83       	std	Y+1, r24	; 0x01
	}
	
	memcpy(message+1,&massFlow,sizeof(float));         // This should fill 1->4 with the float value
 2ce:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <massFlow>
 2d2:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <massFlow+0x1>
 2d6:	a0 91 13 02 	lds	r26, 0x0213	; 0x800213 <massFlow+0x2>
 2da:	b0 91 14 02 	lds	r27, 0x0214	; 0x800214 <massFlow+0x3>
 2de:	8a 83       	std	Y+2, r24	; 0x02
 2e0:	9b 83       	std	Y+3, r25	; 0x03
 2e2:	ac 83       	std	Y+4, r26	; 0x04
 2e4:	bd 83       	std	Y+5, r27	; 0x05
	memcpy(message+5,&Hall_effect,sizeof(float));   // This should fill 5->6 with the Hall effect sensor value
 2e6:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <Hall_effect>
 2ea:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <Hall_effect+0x1>
 2ee:	9f 83       	std	Y+7, r25	; 0x07
 2f0:	8e 83       	std	Y+6, r24	; 0x06
	memcpy(message+7,&EGT,sizeof(float));           // This should fill 7->8 with the EGT value 
 2f2:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <EGT>
 2f6:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <EGT+0x1>
 2fa:	99 87       	std	Y+9, r25	; 0x09
 2fc:	88 87       	std	Y+8, r24	; 0x08
	memcpy(message+9,&voltageFinal,sizeof(float));
 2fe:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <voltageFinal>
 302:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <voltageFinal+0x1>
 306:	a0 91 1c 02 	lds	r26, 0x021C	; 0x80021c <voltageFinal+0x2>
 30a:	b0 91 1d 02 	lds	r27, 0x021D	; 0x80021d <voltageFinal+0x3>
 30e:	8a 87       	std	Y+10, r24	; 0x0a
 310:	9b 87       	std	Y+11, r25	; 0x0b
 312:	ac 87       	std	Y+12, r26	; 0x0c
 314:	bd 87       	std	Y+13, r27	; 0x0d
	memcpy(message+13,&glow_plug,sizeof(char));         // This should fill 9 with the glow plug on/off
 316:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <glow_plug>
 31a:	8e 87       	std	Y+14, r24	; 0x0e
 31c:	be 01       	movw	r22, r28
 31e:	6f 5f       	subi	r22, 0xFF	; 255
 320:	7f 4f       	sbci	r23, 0xFF	; 255
 322:	ae 01       	movw	r20, r28
 324:	41 5f       	subi	r20, 0xF1	; 241
 326:	5f 4f       	sbci	r21, 0xFF	; 255
	
	for (uint8_t i = 0; i < 14; i++){
		/* Wait for empty transmit buffer */
		while ( !( UCSR0A & (1<<UDRE0)) );
 328:	e0 ec       	ldi	r30, 0xC0	; 192
 32a:	f0 e0       	ldi	r31, 0x00	; 0
		/* Put data into buffer, sends the data */
		UDR0 = message[i];
 32c:	26 ec       	ldi	r18, 0xC6	; 198
 32e:	30 e0       	ldi	r19, 0x00	; 0
	memcpy(message+9,&voltageFinal,sizeof(float));
	memcpy(message+13,&glow_plug,sizeof(char));         // This should fill 9 with the glow plug on/off
	
	for (uint8_t i = 0; i < 14; i++){
		/* Wait for empty transmit buffer */
		while ( !( UCSR0A & (1<<UDRE0)) );
 330:	80 81       	ld	r24, Z
 332:	85 ff       	sbrs	r24, 5
 334:	fd cf       	rjmp	.-6      	; 0x330 <sendToLaptop+0xb4>
		/* Put data into buffer, sends the data */
		UDR0 = message[i];
 336:	db 01       	movw	r26, r22
 338:	8d 91       	ld	r24, X+
 33a:	bd 01       	movw	r22, r26
 33c:	d9 01       	movw	r26, r18
 33e:	8c 93       	st	X, r24
	memcpy(message+5,&Hall_effect,sizeof(float));   // This should fill 5->6 with the Hall effect sensor value
	memcpy(message+7,&EGT,sizeof(float));           // This should fill 7->8 with the EGT value 
	memcpy(message+9,&voltageFinal,sizeof(float));
	memcpy(message+13,&glow_plug,sizeof(char));         // This should fill 9 with the glow plug on/off
	
	for (uint8_t i = 0; i < 14; i++){
 340:	64 17       	cp	r22, r20
 342:	75 07       	cpc	r23, r21
 344:	a9 f7       	brne	.-22     	; 0x330 <sendToLaptop+0xb4>
		while ( !( UCSR0A & (1<<UDRE0)) );
		/* Put data into buffer, sends the data */
		UDR0 = message[i];
	}
	// Now start the timer
	TCCR4B = (1 << CS41) | (1 << CS40);      // start timer 5 with prescalar of 64
 346:	83 e0       	ldi	r24, 0x03	; 3
 348:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>

}
 34c:	2e 96       	adiw	r28, 0x0e	; 14
 34e:	0f b6       	in	r0, 0x3f	; 63
 350:	f8 94       	cli
 352:	de bf       	out	0x3e, r29	; 62
 354:	0f be       	out	0x3f, r0	; 63
 356:	cd bf       	out	0x3d, r28	; 61
 358:	df 91       	pop	r29
 35a:	cf 91       	pop	r28
 35c:	08 95       	ret

0000035e <ESBTransmit>:
 *
 *  @param void
 *  @return void
 */
void ESBTransmit(void)
{
 35e:	1f 93       	push	r17
 360:	cf 93       	push	r28
 362:	df 93       	push	r29
 364:	00 d0       	rcall	.+0      	; 0x366 <ESBTransmit+0x8>
 366:	1f 92       	push	r1
 368:	cd b7       	in	r28, 0x3d	; 61
 36a:	de b7       	in	r29, 0x3e	; 62
	if (bit_is_clear(TIFR1,TOV1))
 36c:	b0 9b       	sbis	0x16, 0	; 22
 36e:	84 c0       	rjmp	.+264    	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
	// 4) Current Mass flow 1 - second byte of the float
	// 5) Current Mass flow 2 - third byte of the float
	// 6) Current Mass flow 3 - fourth byte of the float
	
	char message[4];              // this will be the array for the message string
	message[0] = 'N';              // this is N for normal mode
 370:	8e e4       	ldi	r24, 0x4E	; 78
 372:	89 83       	std	Y+1, r24	; 0x01
	memcpy(message+1,&massFlow,sizeof(float));     
 374:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <massFlow>
 378:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <massFlow+0x1>
 37c:	a0 91 13 02 	lds	r26, 0x0213	; 0x800213 <massFlow+0x2>
 380:	b0 91 14 02 	lds	r27, 0x0214	; 0x800214 <massFlow+0x3>
 384:	8a 83       	std	Y+2, r24	; 0x02
 386:	9b 83       	std	Y+3, r25	; 0x03
 388:	ac 83       	std	Y+4, r26	; 0x04
 38a:	bd 83       	std	Y+5, r27	; 0x05
	
	// Now comes the transmission part of the function
	char receive;
	hasInterrupted = 0;
 38c:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <hasInterrupted>
	for (unsigned char i = 0; i < 6 + ECU_temp_sensors; i++){
 390:	10 e0       	ldi	r17, 0x00	; 0
 392:	03 c0       	rjmp	.+6      	; 0x39a <ESBTransmit+0x3c>
 394:	11 e0       	ldi	r17, 0x01	; 1
 396:	01 c0       	rjmp	.+2      	; 0x39a <ESBTransmit+0x3c>
 398:	11 e0       	ldi	r17, 0x01	; 1
		if (i > 3){
 39a:	14 30       	cpi	r17, 0x04	; 4
 39c:	18 f0       	brcs	.+6      	; 0x3a4 <ESBTransmit+0x46>
			receive = SPI_Transmit(0);               // transmit nothing but need to fill something in the buffer 
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	b5 de       	rcall	.-662    	; 0x10c <SPI_Transmit>
 3a2:	08 c0       	rjmp	.+16     	; 0x3b4 <ESBTransmit+0x56>
		}
		else{
			receive = SPI_Transmit(message[i]);
 3a4:	e1 e0       	ldi	r30, 0x01	; 1
 3a6:	f0 e0       	ldi	r31, 0x00	; 0
 3a8:	ec 0f       	add	r30, r28
 3aa:	fd 1f       	adc	r31, r29
 3ac:	e1 0f       	add	r30, r17
 3ae:	f1 1d       	adc	r31, r1
 3b0:	80 81       	ld	r24, Z
 3b2:	ac de       	rcall	.-680    	; 0x10c <SPI_Transmit>
		}
		
		// Now process the information
		switch (i){
 3b4:	12 30       	cpi	r17, 0x02	; 2
 3b6:	a1 f0       	breq	.+40     	; 0x3e0 <ESBTransmit+0x82>
 3b8:	28 f4       	brcc	.+10     	; 0x3c4 <ESBTransmit+0x66>
 3ba:	11 23       	and	r17, r17
 3bc:	49 f0       	breq	.+18     	; 0x3d0 <ESBTransmit+0x72>
 3be:	11 30       	cpi	r17, 0x01	; 1
 3c0:	51 f0       	breq	.+20     	; 0x3d6 <ESBTransmit+0x78>
 3c2:	32 c0       	rjmp	.+100    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 3c4:	14 30       	cpi	r17, 0x04	; 4
 3c6:	e9 f0       	breq	.+58     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3c8:	b8 f0       	brcs	.+46     	; 0x3f8 <ESBTransmit+0x9a>
 3ca:	15 30       	cpi	r17, 0x05	; 5
 3cc:	31 f1       	breq	.+76     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 3ce:	2c c0       	rjmp	.+88     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
			case 0:
				opMode = receive;
 3d0:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <opMode>
				break;
 3d4:	41 c0       	rjmp	.+130    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
			case 1:
				Hall_effect = (receive << 8);
 3d6:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <Hall_effect>
 3da:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <Hall_effect+0x1>
				break;
 3de:	3c c0       	rjmp	.+120    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
			case 2:
				Hall_effect |= receive;
 3e0:	20 91 0e 02 	lds	r18, 0x020E	; 0x80020e <Hall_effect>
 3e4:	30 91 0f 02 	lds	r19, 0x020F	; 0x80020f <Hall_effect+0x1>
 3e8:	a9 01       	movw	r20, r18
 3ea:	48 2b       	or	r20, r24
 3ec:	ca 01       	movw	r24, r20
 3ee:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <Hall_effect+0x1>
 3f2:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <Hall_effect>
				break;
 3f6:	30 c0       	rjmp	.+96     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
			case 3:
				EGT = (receive << 8);
 3f8:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <EGT>
 3fc:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <EGT+0x1>
				break;
 400:	2b c0       	rjmp	.+86     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
			case 4:
				EGT |= receive;
 402:	20 91 1e 02 	lds	r18, 0x021E	; 0x80021e <EGT>
 406:	30 91 1f 02 	lds	r19, 0x021F	; 0x80021f <EGT+0x1>
 40a:	a9 01       	movw	r20, r18
 40c:	48 2b       	or	r20, r24
 40e:	ca 01       	movw	r24, r20
 410:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <EGT+0x1>
 414:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <EGT>
				break;
 418:	1f c0       	rjmp	.+62     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
			case 5:
				glow_plug = receive;
 41a:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <glow_plug>
				}
				else{
					ESB_temp[i - 5] |= receive;
				}
		}
		if (hasInterrupted){
 41e:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <hasInterrupted>
 422:	81 11       	cpse	r24, r1
 424:	b7 cf       	rjmp	.-146    	; 0x394 <ESBTransmit+0x36>
 426:	20 c0       	rjmp	.+64     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
				break;
			case 5:
				glow_plug = receive;
				break;
			default:                // This section should never run unless there are temp sensors on the ESB
				if (i % 2){
 428:	10 ff       	sbrs	r17, 0
 42a:	09 c0       	rjmp	.+18     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
					ESB_temp[i - 5] = (receive << 8);
 42c:	e1 2f       	mov	r30, r17
 42e:	f0 e0       	ldi	r31, 0x00	; 0
 430:	ee 0f       	add	r30, r30
 432:	ff 1f       	adc	r31, r31
 434:	e9 5e       	subi	r30, 0xE9	; 233
 436:	fd 4f       	sbci	r31, 0xFD	; 253
 438:	10 82       	st	Z, r1
 43a:	81 83       	std	Z+1, r24	; 0x01
 43c:	0d c0       	rjmp	.+26     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
				}
				else{
					ESB_temp[i - 5] |= receive;
 43e:	e1 2f       	mov	r30, r17
 440:	f0 e0       	ldi	r31, 0x00	; 0
 442:	ee 0f       	add	r30, r30
 444:	ff 1f       	adc	r31, r31
 446:	e9 5e       	subi	r30, 0xE9	; 233
 448:	fd 4f       	sbci	r31, 0xFD	; 253
 44a:	20 81       	ld	r18, Z
 44c:	31 81       	ldd	r19, Z+1	; 0x01
 44e:	a9 01       	movw	r20, r18
 450:	48 2b       	or	r20, r24
 452:	ca 01       	movw	r24, r20
 454:	91 83       	std	Z+1, r25	; 0x01
 456:	80 83       	st	Z, r24
				}
		}
		if (hasInterrupted){
 458:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <hasInterrupted>
 45c:	81 11       	cpse	r24, r1
 45e:	9c cf       	rjmp	.-200    	; 0x398 <ESBTransmit+0x3a>
	memcpy(message+1,&massFlow,sizeof(float));     
	
	// Now comes the transmission part of the function
	char receive;
	hasInterrupted = 0;
	for (unsigned char i = 0; i < 6 + ECU_temp_sensors; i++){
 460:	1f 5f       	subi	r17, 0xFF	; 255
 462:	16 30       	cpi	r17, 0x06	; 6
 464:	08 f4       	brcc	.+2      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
		if (hasInterrupted){
			i = 0;   // restart the loop from the beginning because the message got interrupted
			continue;
		}
	}
	sendToLaptop();     // now send all of the data to the laptop
 466:	99 cf       	rjmp	.-206    	; 0x39a <ESBTransmit+0x3c>
 468:	09 df       	rcall	.-494    	; 0x27c <sendToLaptop>
	
	// Since the overflow flag is not clear, we need to clear it by writing a 1 to it
	TIFR1 |= (1 << TOV1);
 46a:	b0 9a       	sbi	0x16, 0	; 22
	TCNT1 = 3036;                 // reset the timer register
 46c:	8c ed       	ldi	r24, 0xDC	; 220
 46e:	9b e0       	ldi	r25, 0x0B	; 11
 470:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 474:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
		
}
 478:	0f 90       	pop	r0
 47a:	0f 90       	pop	r0
 47c:	0f 90       	pop	r0
 47e:	0f 90       	pop	r0
 480:	df 91       	pop	r29
 482:	cf 91       	pop	r28
 484:	1f 91       	pop	r17
 486:	08 95       	ret

00000488 <repeatCommand>:
 *  @return void
 */
void repeatCommand(void)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
 488:	e0 ec       	ldi	r30, 0xC0	; 192
 48a:	f0 e0       	ldi	r31, 0x00	; 0
 48c:	80 81       	ld	r24, Z
 48e:	85 ff       	sbrs	r24, 5
 490:	fd cf       	rjmp	.-6      	; 0x48c <repeatCommand+0x4>
	;
	/* Put data into buffer, sends the data */
	UDR0 = 'R';
 492:	82 e5       	ldi	r24, 0x52	; 82
 494:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 498:	08 95       	ret

0000049a <__vector_25>:
 *
 *  @param void
 *  @return void
 */
ISR(USART0_RX_vect)
{
 49a:	1f 92       	push	r1
 49c:	0f 92       	push	r0
 49e:	0f b6       	in	r0, 0x3f	; 63
 4a0:	0f 92       	push	r0
 4a2:	11 24       	eor	r1, r1
 4a4:	0b b6       	in	r0, 0x3b	; 59
 4a6:	0f 92       	push	r0
 4a8:	2f 93       	push	r18
 4aa:	3f 93       	push	r19
 4ac:	4f 93       	push	r20
 4ae:	5f 93       	push	r21
 4b0:	6f 93       	push	r22
 4b2:	7f 93       	push	r23
 4b4:	8f 93       	push	r24
 4b6:	9f 93       	push	r25
 4b8:	af 93       	push	r26
 4ba:	bf 93       	push	r27
 4bc:	ef 93       	push	r30
 4be:	ff 93       	push	r31
	// This will automatically clear the interrupt flag
	char data = UDR0;
 4c0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	hasInterrupted = 1;                    // Set this flag so that the ESBCommand function knows if it has been interrupted or not
 4c4:	91 e0       	ldi	r25, 0x01	; 1
 4c6:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <hasInterrupted>
	if (newCommand){
 4ca:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <newCommand>
 4ce:	99 23       	and	r25, r25
 4d0:	71 f1       	breq	.+92     	; 0x52e <__vector_25+0x94>
		newCommand = 0;                    // reset this so that the commandMode cannot change until the command string is done
 4d2:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <newCommand>
		if (data == 'C'){
 4d6:	83 34       	cpi	r24, 0x43	; 67
 4d8:	29 f4       	brne	.+10     	; 0x4e4 <__vector_25+0x4a>
			newCommand = 1;
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <newCommand>
			GUI_Connect();
 4e0:	9d de       	rcall	.-710    	; 0x21c <GUI_Connect>
 4e2:	43 c0       	rjmp	.+134    	; 0x56a <__vector_25+0xd0>
		}
		else if (data == 'O'){
 4e4:	8f 34       	cpi	r24, 0x4F	; 79
 4e6:	21 f4       	brne	.+8      	; 0x4f0 <__vector_25+0x56>
			commandMode = 1;               // This means the GUI is ordering the ECU to do something
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <commandMode>
 4ee:	3d c0       	rjmp	.+122    	; 0x56a <__vector_25+0xd0>
		}
		else if (data == 'T'){
 4f0:	84 35       	cpi	r24, 0x54	; 84
 4f2:	21 f4       	brne	.+8      	; 0x4fc <__vector_25+0x62>
			commandMode = 2;               // This means the GUI is requesting the ECU change the throttle to a specified value
 4f4:	82 e0       	ldi	r24, 0x02	; 2
 4f6:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <commandMode>
 4fa:	37 c0       	rjmp	.+110    	; 0x56a <__vector_25+0xd0>
		}
		else if (data == 'K'){             // This means the GUI is sending a confirmation message for receiving the usual data transfer
 4fc:	8b 34       	cpi	r24, 0x4B	; 75
 4fe:	a1 f4       	brne	.+40     	; 0x528 <__vector_25+0x8e>
			newCommand = 1;
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <newCommand>
			// stop timer 4
			assign_bit(&TCCR4B, CS41, 0);
 506:	40 e0       	ldi	r20, 0x00	; 0
 508:	61 e0       	ldi	r22, 0x01	; 1
 50a:	81 ea       	ldi	r24, 0xA1	; 161
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	ec d0       	rcall	.+472    	; 0x6e8 <assign_bit>
			assign_bit(&TCCR4B, CS40, 0);            // turn off the timer
 510:	40 e0       	ldi	r20, 0x00	; 0
 512:	60 e0       	ldi	r22, 0x00	; 0
 514:	81 ea       	ldi	r24, 0xA1	; 161
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	e7 d0       	rcall	.+462    	; 0x6e8 <assign_bit>
			TCNT4 = 40536;                           // reset the timer register
 51a:	88 e5       	ldi	r24, 0x58	; 88
 51c:	9e e9       	ldi	r25, 0x9E	; 158
 51e:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7000a5>
 522:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7000a4>
 526:	21 c0       	rjmp	.+66     	; 0x56a <__vector_25+0xd0>
		}
		else{
			commandMode = 0;               // This will handle all undefined behavior
 528:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <commandMode>
 52c:	1e c0       	rjmp	.+60     	; 0x56a <__vector_25+0xd0>
		}
	}
	else if (connected) {
 52e:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <connected>
 532:	99 23       	and	r25, r25
 534:	d1 f0       	breq	.+52     	; 0x56a <__vector_25+0xd0>
		switch (commandMode){
 536:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <commandMode>
 53a:	91 30       	cpi	r25, 0x01	; 1
 53c:	31 f0       	breq	.+12     	; 0x54a <__vector_25+0xb0>
 53e:	18 f0       	brcs	.+6      	; 0x546 <__vector_25+0xac>
 540:	92 30       	cpi	r25, 0x02	; 2
 542:	69 f0       	breq	.+26     	; 0x55e <__vector_25+0xc4>
			case 0:
				repeatCommand();           // repeat the command because something got screwed up  This isn't right because I don't do it over spi, do it over USART
 544:	0f c0       	rjmp	.+30     	; 0x564 <__vector_25+0xca>
				break;
 546:	a0 df       	rcall	.-192    	; 0x488 <repeatCommand>
			case 1:
				if (data == 'S'){          // GUI wants the engine to stop
 548:	0d c0       	rjmp	.+26     	; 0x564 <__vector_25+0xca>
 54a:	83 35       	cpi	r24, 0x53	; 83
					shutdown();
 54c:	11 f4       	brne	.+4      	; 0x552 <__vector_25+0xb8>
 54e:	44 d1       	rcall	.+648    	; 0x7d8 <shutdown>
				}
				else if (data == 'r'){     // GUI wants the engine to start
 550:	09 c0       	rjmp	.+18     	; 0x564 <__vector_25+0xca>
 552:	82 37       	cpi	r24, 0x72	; 114
					startup();
 554:	11 f4       	brne	.+4      	; 0x55a <__vector_25+0xc0>
 556:	4d d1       	rcall	.+666    	; 0x7f2 <startup>
				}
				else{
					repeatCommand();       // undefined behavior, ask GUI to repeat
 558:	05 c0       	rjmp	.+10     	; 0x564 <__vector_25+0xca>
 55a:	96 df       	rcall	.-212    	; 0x488 <repeatCommand>
 55c:	03 c0       	rjmp	.+6      	; 0x564 <__vector_25+0xca>
				}
				break;
			case 2:
				throttle_per = data;       // GUI wants the throttle to the value specified by data
 55e:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <throttle_per>
				throttle();
 562:	54 d1       	rcall	.+680    	; 0x80c <throttle>
 564:	81 e0       	ldi	r24, 0x01	; 1
				break;
		}
		newCommand = 1;                    // reset this so that a new command will be accepted in the way that is expected
 566:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <newCommand>
 56a:	ff 91       	pop	r31
		
	}
}
 56c:	ef 91       	pop	r30
 56e:	bf 91       	pop	r27
 570:	af 91       	pop	r26
 572:	9f 91       	pop	r25
 574:	8f 91       	pop	r24
 576:	7f 91       	pop	r23
 578:	6f 91       	pop	r22
 57a:	5f 91       	pop	r21
 57c:	4f 91       	pop	r20
 57e:	3f 91       	pop	r19
 580:	2f 91       	pop	r18
 582:	0f 90       	pop	r0
 584:	0b be       	out	0x3b, r0	; 59
 586:	0f 90       	pop	r0
 588:	0f be       	out	0x3f, r0	; 63
 58a:	0f 90       	pop	r0
 58c:	1f 90       	pop	r1
 58e:	18 95       	reti

00000590 <batVoltage>:
 *  @return void
 */
void batVoltage(void)
{
	// first check to see if the conversion has completed
	if (bit_is_set(ADCSRA,ADSC))
 590:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
 594:	86 fd       	sbrc	r24, 6
 596:	38 c0       	rjmp	.+112    	; 0x608 <batVoltage+0x78>
		return;
	
	uint8_t low_bits = ADCL;
 598:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
	uint8_t high_bits = ADCH;						 // Do the shifting so that there is room made inside of the 16 bit register
 59c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
	uint16_t result = (high_bits << 8) | low_bits;
	
	// Now I need to convert this 16 bit number into an actual temperature
	voltage += (float) result;   // Convert to float value of the voltage
 5a0:	70 e0       	ldi	r23, 0x00	; 0
 5a2:	78 2b       	or	r23, r24
 5a4:	80 e0       	ldi	r24, 0x00	; 0
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	83 d2       	rcall	.+1286   	; 0xab0 <__floatunsisf>
 5aa:	20 91 15 02 	lds	r18, 0x0215	; 0x800215 <voltage>
 5ae:	30 91 16 02 	lds	r19, 0x0216	; 0x800216 <voltage+0x1>
 5b2:	40 91 17 02 	lds	r20, 0x0217	; 0x800217 <voltage+0x2>
 5b6:	50 91 18 02 	lds	r21, 0x0218	; 0x800218 <voltage+0x3>
 5ba:	ae d1       	rcall	.+860    	; 0x918 <__addsf3>
 5bc:	60 93 15 02 	sts	0x0215, r22	; 0x800215 <voltage>
 5c0:	70 93 16 02 	sts	0x0216, r23	; 0x800216 <voltage+0x1>
 5c4:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <voltage+0x2>
 5c8:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <voltage+0x3>
	
	// Now prepare the ADC for the next channel
	if (batChannel == 2){
 5cc:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <__data_end>
 5d0:	22 30       	cpi	r18, 0x02	; 2
 5d2:	81 f4       	brne	.+32     	; 0x5f4 <batVoltage+0x64>
		voltageFinal = voltage;
 5d4:	60 93 1a 02 	sts	0x021A, r22	; 0x80021a <voltageFinal>
 5d8:	70 93 1b 02 	sts	0x021B, r23	; 0x80021b <voltageFinal+0x1>
 5dc:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <voltageFinal+0x2>
 5e0:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <voltageFinal+0x3>
		*sfr |= val;
	}
	else             // This is for if I want the value to be a 0
	{
		val = ~(1 << bit);
		*sfr &= val;
 5e4:	ec e7       	ldi	r30, 0x7C	; 124
 5e6:	f0 e0       	ldi	r31, 0x00	; 0
 5e8:	80 81       	ld	r24, Z
 5ea:	8d 7f       	andi	r24, 0xFD	; 253
 5ec:	80 83       	st	Z, r24
	
	// Now prepare the ADC for the next channel
	if (batChannel == 2){
		voltageFinal = voltage;
		assign_bit(&ADMUX,MUX1,0);
		batChannel = 0;
 5ee:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <__data_end>
 5f2:	08 95       	ret
	}
	else{  // if there are still at least one more channel to sample before starting over
		ADMUX++;
 5f4:	ec e7       	ldi	r30, 0x7C	; 124
 5f6:	f0 e0       	ldi	r31, 0x00	; 0
 5f8:	80 81       	ld	r24, Z
 5fa:	8f 5f       	subi	r24, 0xFF	; 255
 5fc:	80 83       	st	Z, r24
		batChannel++;
 5fe:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <__data_end>
 602:	8f 5f       	subi	r24, 0xFF	; 255
 604:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <__data_end>
 608:	08 95       	ret

0000060a <measureFlow>:
 *  @param void
 *  @return void
 */
void measureFlow(void)
{
	if (flowMode == 0){            // This is the mode in which the flow meter has not started sampling
 60a:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <flowMode>
 60e:	81 11       	cpse	r24, r1
 610:	0c c0       	rjmp	.+24     	; 0x62a <measureFlow+0x20>
		pulse_count = 0;
 612:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <ESB_temp>

		EIMSK |= (1 << INT2);    // enable the external interrupts
 616:	ea 9a       	sbi	0x1d, 2	; 29
	
		// Now start Timer3 with overflow interrupts
		TCCR3B |= (1 << CS31) | (1 << CS30);
 618:	e1 e9       	ldi	r30, 0x91	; 145
 61a:	f0 e0       	ldi	r31, 0x00	; 0
 61c:	80 81       	ld	r24, Z
 61e:	83 60       	ori	r24, 0x03	; 3
 620:	80 83       	st	Z, r24
		flowMode = 1;
 622:	81 e0       	ldi	r24, 0x01	; 1
 624:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <flowMode>
 628:	08 95       	ret
	}
	else if(flowMode == 2){        // This is the mode in which the flow meter has completed sampling
 62a:	82 30       	cpi	r24, 0x02	; 2
 62c:	19 f5       	brne	.+70     	; 0x674 <measureFlow+0x6a>
		// Now need to convert the pulses detected into an actual flow rate
		massFlow = V_per_pulse * (float) pulse_count;
		massFlow = (massFlow - pump_b) / pump_m;
 62e:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <ESB_temp>
 632:	70 e0       	ldi	r23, 0x00	; 0
 634:	80 e0       	ldi	r24, 0x00	; 0
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	3b d2       	rcall	.+1142   	; 0xab0 <__floatunsisf>
 63a:	20 91 23 02 	lds	r18, 0x0223	; 0x800223 <V_per_pulse>
 63e:	30 91 24 02 	lds	r19, 0x0224	; 0x800224 <V_per_pulse+0x1>
 642:	40 91 25 02 	lds	r20, 0x0225	; 0x800225 <V_per_pulse+0x2>
 646:	50 91 26 02 	lds	r21, 0x0226	; 0x800226 <V_per_pulse+0x3>
 64a:	c0 d2       	rcall	.+1408   	; 0xbcc <__mulsf3>
 64c:	27 e5       	ldi	r18, 0x57	; 87
 64e:	3b e7       	ldi	r19, 0x7B	; 123
 650:	48 e4       	ldi	r20, 0x48	; 72
 652:	5e e3       	ldi	r21, 0x3E	; 62
 654:	60 d1       	rcall	.+704    	; 0x916 <__subsf3>
 656:	21 e7       	ldi	r18, 0x71	; 113
 658:	32 ee       	ldi	r19, 0xE2	; 226
 65a:	43 ec       	ldi	r20, 0xC3	; 195
 65c:	5e e3       	ldi	r21, 0x3E	; 62
 65e:	c0 d1       	rcall	.+896    	; 0x9e0 <__divsf3>
 660:	60 93 11 02 	sts	0x0211, r22	; 0x800211 <massFlow>
 664:	70 93 12 02 	sts	0x0212, r23	; 0x800212 <massFlow+0x1>
 668:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <massFlow+0x2>
 66c:	90 93 14 02 	sts	0x0214, r25	; 0x800214 <massFlow+0x3>
		flowMode = 0;     // prepare for the next measurement
 670:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <flowMode>
 674:	08 95       	ret

00000676 <__vector_3>:
 *  @param[in] pulse_count This is the number which describes how many pulses have been received for the sampling period.  It is an implicit argument as it is a global variable which is not explicitly passed in.
 *  @return void
 *  @see flowMeter
 */
ISR(INT2_vect)
{
 676:	1f 92       	push	r1
 678:	0f 92       	push	r0
 67a:	0f b6       	in	r0, 0x3f	; 63
 67c:	0f 92       	push	r0
 67e:	11 24       	eor	r1, r1
 680:	8f 93       	push	r24
	pulse_count++;  // The interrupt flag will automatically be cleared by hardware
 682:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <ESB_temp>
 686:	8f 5f       	subi	r24, 0xFF	; 255
 688:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <ESB_temp>
}
 68c:	8f 91       	pop	r24
 68e:	0f 90       	pop	r0
 690:	0f be       	out	0x3f, r0	; 63
 692:	0f 90       	pop	r0
 694:	1f 90       	pop	r1
 696:	18 95       	reti

00000698 <__vector_35>:
 *
 *  @param void
 *  @return void
 */
ISR(TIMER3_OVF_vect)
{
 698:	1f 92       	push	r1
 69a:	0f 92       	push	r0
 69c:	0f b6       	in	r0, 0x3f	; 63
 69e:	0f 92       	push	r0
 6a0:	11 24       	eor	r1, r1
 6a2:	0b b6       	in	r0, 0x3b	; 59
 6a4:	0f 92       	push	r0
 6a6:	8f 93       	push	r24
 6a8:	9f 93       	push	r25
 6aa:	ef 93       	push	r30
 6ac:	ff 93       	push	r31
		*sfr |= val;
	}
	else             // This is for if I want the value to be a 0
	{
		val = ~(1 << bit);
		*sfr &= val;
 6ae:	ea 98       	cbi	0x1d, 2	; 29
 6b0:	e1 e9       	ldi	r30, 0x91	; 145
 6b2:	f0 e0       	ldi	r31, 0x00	; 0
 6b4:	80 81       	ld	r24, Z
 6b6:	8d 7f       	andi	r24, 0xFD	; 253
 6b8:	80 83       	st	Z, r24
 6ba:	80 81       	ld	r24, Z
 6bc:	8e 7f       	andi	r24, 0xFE	; 254
 6be:	80 83       	st	Z, r24
	// Now turn off Timer 3
	assign_bit(&TCCR3B, CS31, 0);
	assign_bit(&TCCR3B, CS30, 0);
	
	// Now reset the value inside of the TIMER3 register
	TCNT3 = 3036;    // This will allow the timer to run for 0.25 sec once the prescalars are restored
 6c0:	8c ed       	ldi	r24, 0xDC	; 220
 6c2:	9b e0       	ldi	r25, 0x0B	; 11
 6c4:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
 6c8:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
	
	// now chance the flowMode
	flowMode = 2;
 6cc:	82 e0       	ldi	r24, 0x02	; 2
 6ce:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <flowMode>
}
 6d2:	ff 91       	pop	r31
 6d4:	ef 91       	pop	r30
 6d6:	9f 91       	pop	r25
 6d8:	8f 91       	pop	r24
 6da:	0f 90       	pop	r0
 6dc:	0b be       	out	0x3b, r0	; 59
 6de:	0f 90       	pop	r0
 6e0:	0f be       	out	0x3f, r0	; 63
 6e2:	0f 90       	pop	r0
 6e4:	1f 90       	pop	r1
 6e6:	18 95       	reti

000006e8 <assign_bit>:
 *  @param[in] val The value, either 1 or 0, that the user would like the bit to be after the function call.
 *  @return void
 */
void assign_bit(volatile uint8_t *sfr,uint8_t bit, uint8_t val)
{
	if (val)      // This is for if I want the value to be a 1
 6e8:	44 23       	and	r20, r20
 6ea:	59 f0       	breq	.+22     	; 0x702 <assign_bit+0x1a>
	{
		val = (val << bit);
 6ec:	50 e0       	ldi	r21, 0x00	; 0
 6ee:	02 c0       	rjmp	.+4      	; 0x6f4 <assign_bit+0xc>
 6f0:	44 0f       	add	r20, r20
 6f2:	55 1f       	adc	r21, r21
 6f4:	6a 95       	dec	r22
 6f6:	e2 f7       	brpl	.-8      	; 0x6f0 <assign_bit+0x8>
		*sfr |= val;
 6f8:	fc 01       	movw	r30, r24
 6fa:	20 81       	ld	r18, Z
 6fc:	42 2b       	or	r20, r18
 6fe:	40 83       	st	Z, r20
 700:	08 95       	ret
	}
	else             // This is for if I want the value to be a 0
	{
		val = ~(1 << bit);
		*sfr &= val;
 702:	fc 01       	movw	r30, r24
 704:	40 81       	ld	r20, Z
 706:	21 e0       	ldi	r18, 0x01	; 1
 708:	30 e0       	ldi	r19, 0x00	; 0
 70a:	02 c0       	rjmp	.+4      	; 0x710 <assign_bit+0x28>
 70c:	22 0f       	add	r18, r18
 70e:	33 1f       	adc	r19, r19
 710:	6a 95       	dec	r22
 712:	e2 f7       	brpl	.-8      	; 0x70c <assign_bit+0x24>
 714:	20 95       	com	r18
 716:	24 23       	and	r18, r20
 718:	20 83       	st	Z, r18
 71a:	08 95       	ret

0000071c <__vector_45>:
	}
}

ISR(TIMER4_OVF_vect)
{
 71c:	1f 92       	push	r1
 71e:	0f 92       	push	r0
 720:	0f b6       	in	r0, 0x3f	; 63
 722:	0f 92       	push	r0
 724:	11 24       	eor	r1, r1
 726:	0b b6       	in	r0, 0x3b	; 59
 728:	0f 92       	push	r0
 72a:	2f 93       	push	r18
 72c:	3f 93       	push	r19
 72e:	4f 93       	push	r20
 730:	5f 93       	push	r21
 732:	6f 93       	push	r22
 734:	7f 93       	push	r23
 736:	8f 93       	push	r24
 738:	9f 93       	push	r25
 73a:	af 93       	push	r26
 73c:	bf 93       	push	r27
 73e:	ef 93       	push	r30
 740:	ff 93       	push	r31
		*sfr |= val;
	}
	else             // This is for if I want the value to be a 0
	{
		val = ~(1 << bit);
		*sfr &= val;
 742:	e1 ea       	ldi	r30, 0xA1	; 161
 744:	f0 e0       	ldi	r31, 0x00	; 0
 746:	80 81       	ld	r24, Z
 748:	8d 7f       	andi	r24, 0xFD	; 253
 74a:	80 83       	st	Z, r24
 74c:	80 81       	ld	r24, Z
 74e:	8e 7f       	andi	r24, 0xFE	; 254
 750:	80 83       	st	Z, r24
ISR(TIMER4_OVF_vect)
{
	// If it makes it in here then the Computer is presumed to have gotten disconnected from the ECU
	assign_bit(&TCCR4B, CS41, 0);
	assign_bit(&TCCR4B, CS40, 0);            // turn off the timer
	TCNT4 = 40536;                           // reload the timer register
 752:	88 e5       	ldi	r24, 0x58	; 88
 754:	9e e9       	ldi	r25, 0x9E	; 158
 756:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7000a5>
 75a:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7000a4>
	shutdown();
 75e:	3c d0       	rcall	.+120    	; 0x7d8 <shutdown>
	connected = 0;
 760:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <connected>
}
 764:	ff 91       	pop	r31
 766:	ef 91       	pop	r30
 768:	bf 91       	pop	r27
 76a:	af 91       	pop	r26
 76c:	9f 91       	pop	r25
 76e:	8f 91       	pop	r24
 770:	7f 91       	pop	r23
 772:	6f 91       	pop	r22
 774:	5f 91       	pop	r21
 776:	4f 91       	pop	r20
 778:	3f 91       	pop	r19
 77a:	2f 91       	pop	r18
 77c:	0f 90       	pop	r0
 77e:	0b be       	out	0x3b, r0	; 59
 780:	0f 90       	pop	r0
 782:	0f be       	out	0x3f, r0	; 63
 784:	0f 90       	pop	r0
 786:	1f 90       	pop	r1
 788:	18 95       	reti

0000078a <__vector_50>:

ISR(TIMER5_OVF_vect)
{
 78a:	1f 92       	push	r1
 78c:	0f 92       	push	r0
 78e:	0f b6       	in	r0, 0x3f	; 63
 790:	0f 92       	push	r0
 792:	11 24       	eor	r1, r1
 794:	0b b6       	in	r0, 0x3b	; 59
 796:	0f 92       	push	r0
 798:	8f 93       	push	r24
 79a:	9f 93       	push	r25
 79c:	ef 93       	push	r30
 79e:	ff 93       	push	r31
	// If it makes it in here then the ESB is presumed to have gotten disconnected from the ECU
	opMode = 5;
 7a0:	85 e0       	ldi	r24, 0x05	; 5
 7a2:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <opMode>
		*sfr |= val;
	}
	else             // This is for if I want the value to be a 0
	{
		val = ~(1 << bit);
		*sfr &= val;
 7a6:	e1 e2       	ldi	r30, 0x21	; 33
 7a8:	f1 e0       	ldi	r31, 0x01	; 1
 7aa:	80 81       	ld	r24, Z
 7ac:	8d 7f       	andi	r24, 0xFD	; 253
 7ae:	80 83       	st	Z, r24
 7b0:	80 81       	ld	r24, Z
 7b2:	8e 7f       	andi	r24, 0xFE	; 254
 7b4:	80 83       	st	Z, r24
{
	// If it makes it in here then the ESB is presumed to have gotten disconnected from the ECU
	opMode = 5;
	assign_bit(&TCCR5B, CS51, 0);
	assign_bit(&TCCR5B, CS50, 0);            // turn off the timer
	TCNT5 = 40536;                           // reload the timer register
 7b6:	88 e5       	ldi	r24, 0x58	; 88
 7b8:	9e e9       	ldi	r25, 0x9E	; 158
 7ba:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <__TEXT_REGION_LENGTH__+0x700125>
 7be:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
 7c2:	ff 91       	pop	r31
 7c4:	ef 91       	pop	r30
 7c6:	9f 91       	pop	r25
 7c8:	8f 91       	pop	r24
 7ca:	0f 90       	pop	r0
 7cc:	0b be       	out	0x3b, r0	; 59
 7ce:	0f 90       	pop	r0
 7d0:	0f be       	out	0x3f, r0	; 63
 7d2:	0f 90       	pop	r0
 7d4:	1f 90       	pop	r1
 7d6:	18 95       	reti

000007d8 <shutdown>:
 *  @return void
 */
void shutdown(void)
{
	char receive = 'P';                        // This is a letter that isn't K and so it will enter the loop
	hasInterrupted = 0;
 7d8:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <hasInterrupted>
	while (receive != 'K'){                    // Loop until the ESB says K
		receive = SPI_Transmit('S');
 7dc:	83 e5       	ldi	r24, 0x53	; 83
 7de:	96 dc       	rcall	.-1748   	; 0x10c <SPI_Transmit>
		receive = SPI_Transmit(0);          // This last message should have the K
 7e0:	80 e0       	ldi	r24, 0x00	; 0
 7e2:	94 dc       	rcall	.-1752   	; 0x10c <SPI_Transmit>
 */
void shutdown(void)
{
	char receive = 'P';                        // This is a letter that isn't K and so it will enter the loop
	hasInterrupted = 0;
	while (receive != 'K'){                    // Loop until the ESB says K
 7e4:	8b 34       	cpi	r24, 0x4B	; 75
 7e6:	d1 f7       	brne	.-12     	; 0x7dc <shutdown+0x4>
		receive = SPI_Transmit('S');
		receive = SPI_Transmit(0);          // This last message should have the K
	}
	if (hasInterrupted){
 7e8:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <hasInterrupted>
		shutdown();                            // just keep calling this function until it doesn't get interrupted
 7ec:	81 11       	cpse	r24, r1
 7ee:	f4 cf       	rjmp	.-24     	; 0x7d8 <shutdown>
 7f0:	08 95       	ret

000007f2 <startup>:
 *  @return void
 */
void startup(void)
{
	char receive = 'P';                           // This is a char that isn't K and so it will enter the loop
	hasInterrupted = 0;
 7f2:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <hasInterrupted>
	while (receive != 'K'){
		receive = SPI_Transmit('r');   
 7f6:	82 e7       	ldi	r24, 0x72	; 114
 7f8:	89 dc       	rcall	.-1774   	; 0x10c <SPI_Transmit>
		receive = SPI_Transmit(0);            // This last message should have the K
 7fa:	80 e0       	ldi	r24, 0x00	; 0
 7fc:	87 dc       	rcall	.-1778   	; 0x10c <SPI_Transmit>
 */
void startup(void)
{
	char receive = 'P';                           // This is a char that isn't K and so it will enter the loop
	hasInterrupted = 0;
	while (receive != 'K'){
 7fe:	8b 34       	cpi	r24, 0x4B	; 75
 800:	d1 f7       	brne	.-12     	; 0x7f6 <startup+0x4>
		receive = SPI_Transmit('r');   
		receive = SPI_Transmit(0);            // This last message should have the K
	}
	// The reason this is a lower case r is so that a single bit error
	// won't make this look like an "S"
	if (hasInterrupted){
 802:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <hasInterrupted>
		startup();                               // just keep calling this function until it doesn't get interrupted
 806:	81 11       	cpse	r24, r1
 808:	f4 cf       	rjmp	.-24     	; 0x7f2 <startup>
 80a:	08 95       	ret

0000080c <throttle>:
 *
 *  @param void
 *  @return void
 */
void throttle(void)
{
 80c:	cf 93       	push	r28
	char message[1];
	memcpy(message,&throttle_per,sizeof(uint8_t));      // copy over the memory into an array
 80e:	c0 91 27 02 	lds	r28, 0x0227	; 0x800227 <throttle_per>
	
	char recieve = '0';                                 // This is a char that isn't K and so will enter the loop
	hasInterrupted = 0;
 812:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <hasInterrupted>
	while (recieve != 'K'){
		recieve = SPI_Transmit('t');
 816:	84 e7       	ldi	r24, 0x74	; 116
 818:	79 dc       	rcall	.-1806   	; 0x10c <SPI_Transmit>
		recieve = SPI_Transmit(message[0]);
 81a:	8c 2f       	mov	r24, r28
 81c:	77 dc       	rcall	.-1810   	; 0x10c <SPI_Transmit>
		recieve = SPI_Transmit(0);                   // This last message should have the K
 81e:	80 e0       	ldi	r24, 0x00	; 0
 820:	75 dc       	rcall	.-1814   	; 0x10c <SPI_Transmit>
 822:	8b 34       	cpi	r24, 0x4B	; 75
	char message[1];
	memcpy(message,&throttle_per,sizeof(uint8_t));      // copy over the memory into an array
	
	char recieve = '0';                                 // This is a char that isn't K and so will enter the loop
	hasInterrupted = 0;
	while (recieve != 'K'){
 824:	c1 f7       	brne	.-16     	; 0x816 <throttle+0xa>
 826:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <hasInterrupted>
		recieve = SPI_Transmit('t');
		recieve = SPI_Transmit(message[0]);
		recieve = SPI_Transmit(0);                   // This last message should have the K
	}
	if (hasInterrupted){
 82a:	81 11       	cpse	r24, r1
		throttle();                                     // Just keep calling this function until it isn't interrupted
 82c:	ef df       	rcall	.-34     	; 0x80c <throttle>
 82e:	cf 91       	pop	r28
	}
}
 830:	08 95       	ret

00000832 <main>:
#include "ECU_funcs.h"

int main(void)
{
    if (HCU_present){
		pre_Initial();       // This will have the waiting until the HCU tells the ECU to wake up
 832:	05 d0       	rcall	.+10     	; 0x83e <pre_Initial>
	}
	Initial();
 834:	09 d0       	rcall	.+18     	; 0x848 <Initial>
	while (1) 
    {
		batVoltage();       // This is the battery voltage measurement function
 836:	ac de       	rcall	.-680    	; 0x590 <batVoltage>
		measureFlow();      // This is the flow calculation function
 838:	e8 de       	rcall	.-560    	; 0x60a <measureFlow>
 83a:	91 dd       	rcall	.-1246   	; 0x35e <ESBTransmit>
		ESBTransmit();      // This is the normal message transmission between the ESU and ESB
 83c:	fc cf       	rjmp	.-8      	; 0x836 <main+0x4>

0000083e <pre_Initial>:
 *  @param void
 *  @return void
 */
void pre_Initial(void)
{
	DDRC |= (0 << HCU_link);      // set this pin for input
 83e:	87 b1       	in	r24, 0x07	; 7
 840:	87 b9       	out	0x07, r24	; 7
	while (bit_is_clear(PINC, HCU_link));    // just wait until the HCU tells the ECU to wake up
 842:	31 9b       	sbis	0x06, 1	; 6
 844:	fe cf       	rjmp	.-4      	; 0x842 <pre_Initial+0x4>
}
 846:	08 95       	ret

00000848 <Initial>:
 * 
 *  @param void
 *  @return void
 */
void Initial(void)
{
 848:	cf 93       	push	r28
	////////////////////////// Initialize Port Configuration ////////////////////////////////
	DDRD |= (1 << XCK1);          // Enable the SPI output pin for output.  This puts the ECU in master mode for SPI
 84a:	55 9a       	sbi	0x0a, 5	; 10
	DDRC |= (1 << ESB_SS);        // Enable the ESB SS pin as and output.  This will drive low to begin data transfer
 84c:	38 9a       	sbi	0x07, 0	; 7
	PORTC |= (1 << ESB_SS);       // Drive high for not as to not confuse the ESB
 84e:	40 9a       	sbi	0x08, 0	; 8
	
	//////////////////// Initialize the Asynchronous Communication //////////////////////////
	UBRR0 = 12;     // With a 16 MHz clock this will make a baud rate of 76800 (error of 0.16%)
 850:	8c e0       	ldi	r24, 0x0C	; 12
 852:	90 e0       	ldi	r25, 0x00	; 0
 854:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 858:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	
	// The next things that need to be set are as follows (reference page 220 in datasheet)
	// 1) Enable receive interrupts
	// 2) Enable receiver
	// 3) Enable transmitter
	UCSR0B = (1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0);
 85c:	88 e9       	ldi	r24, 0x98	; 152
 85e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
	// I want the following things
	// 1) Asynchronous USART
	// 2) No Parity
	// 3) 1 Stop bit
	// 4) 8 bit character size
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);   // Now the USART should be ready to receive
 862:	86 e0       	ldi	r24, 0x06	; 6
 864:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
	// The next things that need to be set are as follows
	// 1) Set MSPI mode of operation and SPI data mode to 0
	// 2) Enable the receiver and transmitter
	// 3) Set the baud rate.  This has to be done after the the transmitter has been enabled
	
	UCSR1C = (1<<UMSEL11)|(1<<UMSEL10)|(0<<UCPHA1)|(0<<UCPOL1);
 868:	c0 ec       	ldi	r28, 0xC0	; 192
 86a:	c0 93 ca 00 	sts	0x00CA, r28	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
	UCSR1B = (1<<RXEN1)|(1<<TXEN1);
 86e:	88 e1       	ldi	r24, 0x18	; 24
 870:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
	UBRR1 = 103;    // This will have a baud rate of 76800 with the 16MHz oscillator
 874:	87 e6       	ldi	r24, 0x67	; 103
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
 87c:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
	
	// Now connect with the ESB, must wait until this step is completed
	ESB_Connect();
 880:	74 dc       	rcall	.-1816   	; 0x16a <ESB_Connect>
	// 2) The channel for ADMUX needs to be channel 0
	// 3) The ADC needs to be enabled without interrupts
	// 4) Division factor for the ADC needs to be set to 128 to keep the input clock 
	//    frequency between 50kHz and 200kHz
	
	ADMUX = (1 << REFS1) | (1 << REFS0);
 882:	c0 93 7c 00 	sts	0x007C, r28	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRA = (1 << ADEN) | (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);
 886:	ea e7       	ldi	r30, 0x7A	; 122
 888:	f0 e0       	ldi	r31, 0x00	; 0
 88a:	87 e8       	ldi	r24, 0x87	; 135
 88c:	80 83       	st	Z, r24
	batChannel = 0;
 88e:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <__data_end>


	/////////////////////// Enable global interrupts //////////////////////////////////
	sei();
 892:	78 94       	sei
	
	// The next things that need to be set are as follows
	// 1) Timer 1 needs a prescalar of 64 and timer register of 3036    for time of 0.25 sec
	// 2) Timer 3 needs a prescalar of 64 and timer register if 3036
	// 3) Timer 3 needs to have interrupts enabled
	TCNT1 = 3036;
 894:	8c ed       	ldi	r24, 0xDC	; 220
 896:	9b e0       	ldi	r25, 0x0B	; 11
 898:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 89c:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
	TCNT3 = 3036;
 8a0:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
 8a4:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
	TIMSK3 = (1 << TOIE3);    // enable overflow interrupts for the flow meter timer and that's it
 8a8:	81 e0       	ldi	r24, 0x01	; 1
 8aa:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
	// The TIFR1 register and TOV1 flag are the overflow flag for timer1
	TCCR1B = (1 << CS11) | (1 << CS10);    // start timer 1 with prescalar of 64
 8ae:	93 e0       	ldi	r25, 0x03	; 3
 8b0:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
	TCNT4 = 40536;
 8b4:	28 e5       	ldi	r18, 0x58	; 88
 8b6:	3e e9       	ldi	r19, 0x9E	; 158
 8b8:	30 93 a5 00 	sts	0x00A5, r19	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7000a5>
 8bc:	20 93 a4 00 	sts	0x00A4, r18	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7000a4>
	TCNT5 = 40536;
 8c0:	30 93 25 01 	sts	0x0125, r19	; 0x800125 <__TEXT_REGION_LENGTH__+0x700125>
 8c4:	20 93 24 01 	sts	0x0124, r18	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
	TIMSK4 = (1 << TOIE4);     // enable overflow interrupts for the GUI communication timer
 8c8:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
	TIMSK5 = (1 << TOIE5);     // enable overflow interrupts for the ESB communication timer
 8cc:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>

	
	// Begin the first conversion for the ADC
	ADCSRA |= (1 << ADSC);
 8d0:	80 81       	ld	r24, Z
 8d2:	80 64       	ori	r24, 0x40	; 64
 8d4:	80 83       	st	Z, r24
	
	massFlow = 0.0;
 8d6:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <massFlow>
 8da:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <massFlow+0x1>
 8de:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <massFlow+0x2>
 8e2:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <massFlow+0x3>
	 
	// Now configure the external interrupts for the Flow meters
	EICRA = (1 << ISC20) | (1 << ISC21);     // This will enable rising edge interrupts on INT2, see page 110 in datasheet
 8e6:	80 e3       	ldi	r24, 0x30	; 48
 8e8:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
	assign_bit(&DDRD, INT2, 0);              // Configure the PD2 pin as an input so that it can receive the signals
 8ec:	40 e0       	ldi	r20, 0x00	; 0
 8ee:	62 e0       	ldi	r22, 0x02	; 2
 8f0:	8a e2       	ldi	r24, 0x2A	; 42
 8f2:	90 e0       	ldi	r25, 0x00	; 0
 8f4:	f9 de       	rcall	.-526    	; 0x6e8 <assign_bit>
	 
	 
	// Now configure the global variables for the flow meter
	float pulse_flow = (density) * K_factor * max_time / 1000;   // number of pulses expected per g/sec
	V_per_pulse = pump_m / pulse_flow;               // number of volts per pulse
 8f6:	85 e2       	ldi	r24, 0x25	; 37
 8f8:	9c e5       	ldi	r25, 0x5C	; 92
 8fa:	a9 ea       	ldi	r26, 0xA9	; 169
 8fc:	bc e3       	ldi	r27, 0x3C	; 60
 8fe:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <V_per_pulse>
 902:	90 93 24 02 	sts	0x0224, r25	; 0x800224 <V_per_pulse+0x1>
 906:	a0 93 25 02 	sts	0x0225, r26	; 0x800225 <V_per_pulse+0x2>
 90a:	b0 93 26 02 	sts	0x0226, r27	; 0x800226 <V_per_pulse+0x3>
	opMode = 0;
 90e:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <opMode>

 
}
 912:	cf 91       	pop	r28
 914:	08 95       	ret

00000916 <__subsf3>:
 916:	50 58       	subi	r21, 0x80	; 128

00000918 <__addsf3>:
 918:	bb 27       	eor	r27, r27
 91a:	aa 27       	eor	r26, r26
 91c:	0e d0       	rcall	.+28     	; 0x93a <__addsf3x>
 91e:	1c c1       	rjmp	.+568    	; 0xb58 <__fp_round>
 920:	0d d1       	rcall	.+538    	; 0xb3c <__fp_pscA>
 922:	30 f0       	brcs	.+12     	; 0x930 <__addsf3+0x18>
 924:	12 d1       	rcall	.+548    	; 0xb4a <__fp_pscB>
 926:	20 f0       	brcs	.+8      	; 0x930 <__addsf3+0x18>
 928:	31 f4       	brne	.+12     	; 0x936 <__addsf3+0x1e>
 92a:	9f 3f       	cpi	r25, 0xFF	; 255
 92c:	11 f4       	brne	.+4      	; 0x932 <__addsf3+0x1a>
 92e:	1e f4       	brtc	.+6      	; 0x936 <__addsf3+0x1e>
 930:	02 c1       	rjmp	.+516    	; 0xb36 <__fp_nan>
 932:	0e f4       	brtc	.+2      	; 0x936 <__addsf3+0x1e>
 934:	e0 95       	com	r30
 936:	e7 fb       	bst	r30, 7
 938:	f8 c0       	rjmp	.+496    	; 0xb2a <__fp_inf>

0000093a <__addsf3x>:
 93a:	e9 2f       	mov	r30, r25
 93c:	1e d1       	rcall	.+572    	; 0xb7a <__fp_split3>
 93e:	80 f3       	brcs	.-32     	; 0x920 <__addsf3+0x8>
 940:	ba 17       	cp	r27, r26
 942:	62 07       	cpc	r22, r18
 944:	73 07       	cpc	r23, r19
 946:	84 07       	cpc	r24, r20
 948:	95 07       	cpc	r25, r21
 94a:	18 f0       	brcs	.+6      	; 0x952 <__addsf3x+0x18>
 94c:	71 f4       	brne	.+28     	; 0x96a <__addsf3x+0x30>
 94e:	9e f5       	brtc	.+102    	; 0x9b6 <__addsf3x+0x7c>
 950:	36 c1       	rjmp	.+620    	; 0xbbe <__fp_zero>
 952:	0e f4       	brtc	.+2      	; 0x956 <__addsf3x+0x1c>
 954:	e0 95       	com	r30
 956:	0b 2e       	mov	r0, r27
 958:	ba 2f       	mov	r27, r26
 95a:	a0 2d       	mov	r26, r0
 95c:	0b 01       	movw	r0, r22
 95e:	b9 01       	movw	r22, r18
 960:	90 01       	movw	r18, r0
 962:	0c 01       	movw	r0, r24
 964:	ca 01       	movw	r24, r20
 966:	a0 01       	movw	r20, r0
 968:	11 24       	eor	r1, r1
 96a:	ff 27       	eor	r31, r31
 96c:	59 1b       	sub	r21, r25
 96e:	99 f0       	breq	.+38     	; 0x996 <__addsf3x+0x5c>
 970:	59 3f       	cpi	r21, 0xF9	; 249
 972:	50 f4       	brcc	.+20     	; 0x988 <__addsf3x+0x4e>
 974:	50 3e       	cpi	r21, 0xE0	; 224
 976:	68 f1       	brcs	.+90     	; 0x9d2 <__addsf3x+0x98>
 978:	1a 16       	cp	r1, r26
 97a:	f0 40       	sbci	r31, 0x00	; 0
 97c:	a2 2f       	mov	r26, r18
 97e:	23 2f       	mov	r18, r19
 980:	34 2f       	mov	r19, r20
 982:	44 27       	eor	r20, r20
 984:	58 5f       	subi	r21, 0xF8	; 248
 986:	f3 cf       	rjmp	.-26     	; 0x96e <__addsf3x+0x34>
 988:	46 95       	lsr	r20
 98a:	37 95       	ror	r19
 98c:	27 95       	ror	r18
 98e:	a7 95       	ror	r26
 990:	f0 40       	sbci	r31, 0x00	; 0
 992:	53 95       	inc	r21
 994:	c9 f7       	brne	.-14     	; 0x988 <__addsf3x+0x4e>
 996:	7e f4       	brtc	.+30     	; 0x9b6 <__addsf3x+0x7c>
 998:	1f 16       	cp	r1, r31
 99a:	ba 0b       	sbc	r27, r26
 99c:	62 0b       	sbc	r22, r18
 99e:	73 0b       	sbc	r23, r19
 9a0:	84 0b       	sbc	r24, r20
 9a2:	ba f0       	brmi	.+46     	; 0x9d2 <__addsf3x+0x98>
 9a4:	91 50       	subi	r25, 0x01	; 1
 9a6:	a1 f0       	breq	.+40     	; 0x9d0 <__addsf3x+0x96>
 9a8:	ff 0f       	add	r31, r31
 9aa:	bb 1f       	adc	r27, r27
 9ac:	66 1f       	adc	r22, r22
 9ae:	77 1f       	adc	r23, r23
 9b0:	88 1f       	adc	r24, r24
 9b2:	c2 f7       	brpl	.-16     	; 0x9a4 <__addsf3x+0x6a>
 9b4:	0e c0       	rjmp	.+28     	; 0x9d2 <__addsf3x+0x98>
 9b6:	ba 0f       	add	r27, r26
 9b8:	62 1f       	adc	r22, r18
 9ba:	73 1f       	adc	r23, r19
 9bc:	84 1f       	adc	r24, r20
 9be:	48 f4       	brcc	.+18     	; 0x9d2 <__addsf3x+0x98>
 9c0:	87 95       	ror	r24
 9c2:	77 95       	ror	r23
 9c4:	67 95       	ror	r22
 9c6:	b7 95       	ror	r27
 9c8:	f7 95       	ror	r31
 9ca:	9e 3f       	cpi	r25, 0xFE	; 254
 9cc:	08 f0       	brcs	.+2      	; 0x9d0 <__addsf3x+0x96>
 9ce:	b3 cf       	rjmp	.-154    	; 0x936 <__addsf3+0x1e>
 9d0:	93 95       	inc	r25
 9d2:	88 0f       	add	r24, r24
 9d4:	08 f0       	brcs	.+2      	; 0x9d8 <__addsf3x+0x9e>
 9d6:	99 27       	eor	r25, r25
 9d8:	ee 0f       	add	r30, r30
 9da:	97 95       	ror	r25
 9dc:	87 95       	ror	r24
 9de:	08 95       	ret

000009e0 <__divsf3>:
 9e0:	0c d0       	rcall	.+24     	; 0x9fa <__divsf3x>
 9e2:	ba c0       	rjmp	.+372    	; 0xb58 <__fp_round>
 9e4:	b2 d0       	rcall	.+356    	; 0xb4a <__fp_pscB>
 9e6:	40 f0       	brcs	.+16     	; 0x9f8 <__divsf3+0x18>
 9e8:	a9 d0       	rcall	.+338    	; 0xb3c <__fp_pscA>
 9ea:	30 f0       	brcs	.+12     	; 0x9f8 <__divsf3+0x18>
 9ec:	21 f4       	brne	.+8      	; 0x9f6 <__divsf3+0x16>
 9ee:	5f 3f       	cpi	r21, 0xFF	; 255
 9f0:	19 f0       	breq	.+6      	; 0x9f8 <__divsf3+0x18>
 9f2:	9b c0       	rjmp	.+310    	; 0xb2a <__fp_inf>
 9f4:	51 11       	cpse	r21, r1
 9f6:	e4 c0       	rjmp	.+456    	; 0xbc0 <__fp_szero>
 9f8:	9e c0       	rjmp	.+316    	; 0xb36 <__fp_nan>

000009fa <__divsf3x>:
 9fa:	bf d0       	rcall	.+382    	; 0xb7a <__fp_split3>
 9fc:	98 f3       	brcs	.-26     	; 0x9e4 <__divsf3+0x4>

000009fe <__divsf3_pse>:
 9fe:	99 23       	and	r25, r25
 a00:	c9 f3       	breq	.-14     	; 0x9f4 <__divsf3+0x14>
 a02:	55 23       	and	r21, r21
 a04:	b1 f3       	breq	.-20     	; 0x9f2 <__divsf3+0x12>
 a06:	95 1b       	sub	r25, r21
 a08:	55 0b       	sbc	r21, r21
 a0a:	bb 27       	eor	r27, r27
 a0c:	aa 27       	eor	r26, r26
 a0e:	62 17       	cp	r22, r18
 a10:	73 07       	cpc	r23, r19
 a12:	84 07       	cpc	r24, r20
 a14:	38 f0       	brcs	.+14     	; 0xa24 <__divsf3_pse+0x26>
 a16:	9f 5f       	subi	r25, 0xFF	; 255
 a18:	5f 4f       	sbci	r21, 0xFF	; 255
 a1a:	22 0f       	add	r18, r18
 a1c:	33 1f       	adc	r19, r19
 a1e:	44 1f       	adc	r20, r20
 a20:	aa 1f       	adc	r26, r26
 a22:	a9 f3       	breq	.-22     	; 0xa0e <__divsf3_pse+0x10>
 a24:	33 d0       	rcall	.+102    	; 0xa8c <__divsf3_pse+0x8e>
 a26:	0e 2e       	mov	r0, r30
 a28:	3a f0       	brmi	.+14     	; 0xa38 <__divsf3_pse+0x3a>
 a2a:	e0 e8       	ldi	r30, 0x80	; 128
 a2c:	30 d0       	rcall	.+96     	; 0xa8e <__divsf3_pse+0x90>
 a2e:	91 50       	subi	r25, 0x01	; 1
 a30:	50 40       	sbci	r21, 0x00	; 0
 a32:	e6 95       	lsr	r30
 a34:	00 1c       	adc	r0, r0
 a36:	ca f7       	brpl	.-14     	; 0xa2a <__divsf3_pse+0x2c>
 a38:	29 d0       	rcall	.+82     	; 0xa8c <__divsf3_pse+0x8e>
 a3a:	fe 2f       	mov	r31, r30
 a3c:	27 d0       	rcall	.+78     	; 0xa8c <__divsf3_pse+0x8e>
 a3e:	66 0f       	add	r22, r22
 a40:	77 1f       	adc	r23, r23
 a42:	88 1f       	adc	r24, r24
 a44:	bb 1f       	adc	r27, r27
 a46:	26 17       	cp	r18, r22
 a48:	37 07       	cpc	r19, r23
 a4a:	48 07       	cpc	r20, r24
 a4c:	ab 07       	cpc	r26, r27
 a4e:	b0 e8       	ldi	r27, 0x80	; 128
 a50:	09 f0       	breq	.+2      	; 0xa54 <__divsf3_pse+0x56>
 a52:	bb 0b       	sbc	r27, r27
 a54:	80 2d       	mov	r24, r0
 a56:	bf 01       	movw	r22, r30
 a58:	ff 27       	eor	r31, r31
 a5a:	93 58       	subi	r25, 0x83	; 131
 a5c:	5f 4f       	sbci	r21, 0xFF	; 255
 a5e:	2a f0       	brmi	.+10     	; 0xa6a <__divsf3_pse+0x6c>
 a60:	9e 3f       	cpi	r25, 0xFE	; 254
 a62:	51 05       	cpc	r21, r1
 a64:	68 f0       	brcs	.+26     	; 0xa80 <__divsf3_pse+0x82>
 a66:	61 c0       	rjmp	.+194    	; 0xb2a <__fp_inf>
 a68:	ab c0       	rjmp	.+342    	; 0xbc0 <__fp_szero>
 a6a:	5f 3f       	cpi	r21, 0xFF	; 255
 a6c:	ec f3       	brlt	.-6      	; 0xa68 <__divsf3_pse+0x6a>
 a6e:	98 3e       	cpi	r25, 0xE8	; 232
 a70:	dc f3       	brlt	.-10     	; 0xa68 <__divsf3_pse+0x6a>
 a72:	86 95       	lsr	r24
 a74:	77 95       	ror	r23
 a76:	67 95       	ror	r22
 a78:	b7 95       	ror	r27
 a7a:	f7 95       	ror	r31
 a7c:	9f 5f       	subi	r25, 0xFF	; 255
 a7e:	c9 f7       	brne	.-14     	; 0xa72 <__divsf3_pse+0x74>
 a80:	88 0f       	add	r24, r24
 a82:	91 1d       	adc	r25, r1
 a84:	96 95       	lsr	r25
 a86:	87 95       	ror	r24
 a88:	97 f9       	bld	r25, 7
 a8a:	08 95       	ret
 a8c:	e1 e0       	ldi	r30, 0x01	; 1
 a8e:	66 0f       	add	r22, r22
 a90:	77 1f       	adc	r23, r23
 a92:	88 1f       	adc	r24, r24
 a94:	bb 1f       	adc	r27, r27
 a96:	62 17       	cp	r22, r18
 a98:	73 07       	cpc	r23, r19
 a9a:	84 07       	cpc	r24, r20
 a9c:	ba 07       	cpc	r27, r26
 a9e:	20 f0       	brcs	.+8      	; 0xaa8 <__divsf3_pse+0xaa>
 aa0:	62 1b       	sub	r22, r18
 aa2:	73 0b       	sbc	r23, r19
 aa4:	84 0b       	sbc	r24, r20
 aa6:	ba 0b       	sbc	r27, r26
 aa8:	ee 1f       	adc	r30, r30
 aaa:	88 f7       	brcc	.-30     	; 0xa8e <__divsf3_pse+0x90>
 aac:	e0 95       	com	r30
 aae:	08 95       	ret

00000ab0 <__floatunsisf>:
 ab0:	e8 94       	clt
 ab2:	09 c0       	rjmp	.+18     	; 0xac6 <__floatsisf+0x12>

00000ab4 <__floatsisf>:
 ab4:	97 fb       	bst	r25, 7
 ab6:	3e f4       	brtc	.+14     	; 0xac6 <__floatsisf+0x12>
 ab8:	90 95       	com	r25
 aba:	80 95       	com	r24
 abc:	70 95       	com	r23
 abe:	61 95       	neg	r22
 ac0:	7f 4f       	sbci	r23, 0xFF	; 255
 ac2:	8f 4f       	sbci	r24, 0xFF	; 255
 ac4:	9f 4f       	sbci	r25, 0xFF	; 255
 ac6:	99 23       	and	r25, r25
 ac8:	a9 f0       	breq	.+42     	; 0xaf4 <__floatsisf+0x40>
 aca:	f9 2f       	mov	r31, r25
 acc:	96 e9       	ldi	r25, 0x96	; 150
 ace:	bb 27       	eor	r27, r27
 ad0:	93 95       	inc	r25
 ad2:	f6 95       	lsr	r31
 ad4:	87 95       	ror	r24
 ad6:	77 95       	ror	r23
 ad8:	67 95       	ror	r22
 ada:	b7 95       	ror	r27
 adc:	f1 11       	cpse	r31, r1
 ade:	f8 cf       	rjmp	.-16     	; 0xad0 <__floatsisf+0x1c>
 ae0:	fa f4       	brpl	.+62     	; 0xb20 <__floatsisf+0x6c>
 ae2:	bb 0f       	add	r27, r27
 ae4:	11 f4       	brne	.+4      	; 0xaea <__floatsisf+0x36>
 ae6:	60 ff       	sbrs	r22, 0
 ae8:	1b c0       	rjmp	.+54     	; 0xb20 <__floatsisf+0x6c>
 aea:	6f 5f       	subi	r22, 0xFF	; 255
 aec:	7f 4f       	sbci	r23, 0xFF	; 255
 aee:	8f 4f       	sbci	r24, 0xFF	; 255
 af0:	9f 4f       	sbci	r25, 0xFF	; 255
 af2:	16 c0       	rjmp	.+44     	; 0xb20 <__floatsisf+0x6c>
 af4:	88 23       	and	r24, r24
 af6:	11 f0       	breq	.+4      	; 0xafc <__floatsisf+0x48>
 af8:	96 e9       	ldi	r25, 0x96	; 150
 afa:	11 c0       	rjmp	.+34     	; 0xb1e <__floatsisf+0x6a>
 afc:	77 23       	and	r23, r23
 afe:	21 f0       	breq	.+8      	; 0xb08 <__floatsisf+0x54>
 b00:	9e e8       	ldi	r25, 0x8E	; 142
 b02:	87 2f       	mov	r24, r23
 b04:	76 2f       	mov	r23, r22
 b06:	05 c0       	rjmp	.+10     	; 0xb12 <__floatsisf+0x5e>
 b08:	66 23       	and	r22, r22
 b0a:	71 f0       	breq	.+28     	; 0xb28 <__floatsisf+0x74>
 b0c:	96 e8       	ldi	r25, 0x86	; 134
 b0e:	86 2f       	mov	r24, r22
 b10:	70 e0       	ldi	r23, 0x00	; 0
 b12:	60 e0       	ldi	r22, 0x00	; 0
 b14:	2a f0       	brmi	.+10     	; 0xb20 <__floatsisf+0x6c>
 b16:	9a 95       	dec	r25
 b18:	66 0f       	add	r22, r22
 b1a:	77 1f       	adc	r23, r23
 b1c:	88 1f       	adc	r24, r24
 b1e:	da f7       	brpl	.-10     	; 0xb16 <__floatsisf+0x62>
 b20:	88 0f       	add	r24, r24
 b22:	96 95       	lsr	r25
 b24:	87 95       	ror	r24
 b26:	97 f9       	bld	r25, 7
 b28:	08 95       	ret

00000b2a <__fp_inf>:
 b2a:	97 f9       	bld	r25, 7
 b2c:	9f 67       	ori	r25, 0x7F	; 127
 b2e:	80 e8       	ldi	r24, 0x80	; 128
 b30:	70 e0       	ldi	r23, 0x00	; 0
 b32:	60 e0       	ldi	r22, 0x00	; 0
 b34:	08 95       	ret

00000b36 <__fp_nan>:
 b36:	9f ef       	ldi	r25, 0xFF	; 255
 b38:	80 ec       	ldi	r24, 0xC0	; 192
 b3a:	08 95       	ret

00000b3c <__fp_pscA>:
 b3c:	00 24       	eor	r0, r0
 b3e:	0a 94       	dec	r0
 b40:	16 16       	cp	r1, r22
 b42:	17 06       	cpc	r1, r23
 b44:	18 06       	cpc	r1, r24
 b46:	09 06       	cpc	r0, r25
 b48:	08 95       	ret

00000b4a <__fp_pscB>:
 b4a:	00 24       	eor	r0, r0
 b4c:	0a 94       	dec	r0
 b4e:	12 16       	cp	r1, r18
 b50:	13 06       	cpc	r1, r19
 b52:	14 06       	cpc	r1, r20
 b54:	05 06       	cpc	r0, r21
 b56:	08 95       	ret

00000b58 <__fp_round>:
 b58:	09 2e       	mov	r0, r25
 b5a:	03 94       	inc	r0
 b5c:	00 0c       	add	r0, r0
 b5e:	11 f4       	brne	.+4      	; 0xb64 <__fp_round+0xc>
 b60:	88 23       	and	r24, r24
 b62:	52 f0       	brmi	.+20     	; 0xb78 <__fp_round+0x20>
 b64:	bb 0f       	add	r27, r27
 b66:	40 f4       	brcc	.+16     	; 0xb78 <__fp_round+0x20>
 b68:	bf 2b       	or	r27, r31
 b6a:	11 f4       	brne	.+4      	; 0xb70 <__fp_round+0x18>
 b6c:	60 ff       	sbrs	r22, 0
 b6e:	04 c0       	rjmp	.+8      	; 0xb78 <__fp_round+0x20>
 b70:	6f 5f       	subi	r22, 0xFF	; 255
 b72:	7f 4f       	sbci	r23, 0xFF	; 255
 b74:	8f 4f       	sbci	r24, 0xFF	; 255
 b76:	9f 4f       	sbci	r25, 0xFF	; 255
 b78:	08 95       	ret

00000b7a <__fp_split3>:
 b7a:	57 fd       	sbrc	r21, 7
 b7c:	90 58       	subi	r25, 0x80	; 128
 b7e:	44 0f       	add	r20, r20
 b80:	55 1f       	adc	r21, r21
 b82:	59 f0       	breq	.+22     	; 0xb9a <__fp_splitA+0x10>
 b84:	5f 3f       	cpi	r21, 0xFF	; 255
 b86:	71 f0       	breq	.+28     	; 0xba4 <__fp_splitA+0x1a>
 b88:	47 95       	ror	r20

00000b8a <__fp_splitA>:
 b8a:	88 0f       	add	r24, r24
 b8c:	97 fb       	bst	r25, 7
 b8e:	99 1f       	adc	r25, r25
 b90:	61 f0       	breq	.+24     	; 0xbaa <__fp_splitA+0x20>
 b92:	9f 3f       	cpi	r25, 0xFF	; 255
 b94:	79 f0       	breq	.+30     	; 0xbb4 <__fp_splitA+0x2a>
 b96:	87 95       	ror	r24
 b98:	08 95       	ret
 b9a:	12 16       	cp	r1, r18
 b9c:	13 06       	cpc	r1, r19
 b9e:	14 06       	cpc	r1, r20
 ba0:	55 1f       	adc	r21, r21
 ba2:	f2 cf       	rjmp	.-28     	; 0xb88 <__fp_split3+0xe>
 ba4:	46 95       	lsr	r20
 ba6:	f1 df       	rcall	.-30     	; 0xb8a <__fp_splitA>
 ba8:	08 c0       	rjmp	.+16     	; 0xbba <__fp_splitA+0x30>
 baa:	16 16       	cp	r1, r22
 bac:	17 06       	cpc	r1, r23
 bae:	18 06       	cpc	r1, r24
 bb0:	99 1f       	adc	r25, r25
 bb2:	f1 cf       	rjmp	.-30     	; 0xb96 <__fp_splitA+0xc>
 bb4:	86 95       	lsr	r24
 bb6:	71 05       	cpc	r23, r1
 bb8:	61 05       	cpc	r22, r1
 bba:	08 94       	sec
 bbc:	08 95       	ret

00000bbe <__fp_zero>:
 bbe:	e8 94       	clt

00000bc0 <__fp_szero>:
 bc0:	bb 27       	eor	r27, r27
 bc2:	66 27       	eor	r22, r22
 bc4:	77 27       	eor	r23, r23
 bc6:	cb 01       	movw	r24, r22
 bc8:	97 f9       	bld	r25, 7
 bca:	08 95       	ret

00000bcc <__mulsf3>:
 bcc:	0b d0       	rcall	.+22     	; 0xbe4 <__mulsf3x>
 bce:	c4 cf       	rjmp	.-120    	; 0xb58 <__fp_round>
 bd0:	b5 df       	rcall	.-150    	; 0xb3c <__fp_pscA>
 bd2:	28 f0       	brcs	.+10     	; 0xbde <__mulsf3+0x12>
 bd4:	ba df       	rcall	.-140    	; 0xb4a <__fp_pscB>
 bd6:	18 f0       	brcs	.+6      	; 0xbde <__mulsf3+0x12>
 bd8:	95 23       	and	r25, r21
 bda:	09 f0       	breq	.+2      	; 0xbde <__mulsf3+0x12>
 bdc:	a6 cf       	rjmp	.-180    	; 0xb2a <__fp_inf>
 bde:	ab cf       	rjmp	.-170    	; 0xb36 <__fp_nan>
 be0:	11 24       	eor	r1, r1
 be2:	ee cf       	rjmp	.-36     	; 0xbc0 <__fp_szero>

00000be4 <__mulsf3x>:
 be4:	ca df       	rcall	.-108    	; 0xb7a <__fp_split3>
 be6:	a0 f3       	brcs	.-24     	; 0xbd0 <__mulsf3+0x4>

00000be8 <__mulsf3_pse>:
 be8:	95 9f       	mul	r25, r21
 bea:	d1 f3       	breq	.-12     	; 0xbe0 <__mulsf3+0x14>
 bec:	95 0f       	add	r25, r21
 bee:	50 e0       	ldi	r21, 0x00	; 0
 bf0:	55 1f       	adc	r21, r21
 bf2:	62 9f       	mul	r22, r18
 bf4:	f0 01       	movw	r30, r0
 bf6:	72 9f       	mul	r23, r18
 bf8:	bb 27       	eor	r27, r27
 bfa:	f0 0d       	add	r31, r0
 bfc:	b1 1d       	adc	r27, r1
 bfe:	63 9f       	mul	r22, r19
 c00:	aa 27       	eor	r26, r26
 c02:	f0 0d       	add	r31, r0
 c04:	b1 1d       	adc	r27, r1
 c06:	aa 1f       	adc	r26, r26
 c08:	64 9f       	mul	r22, r20
 c0a:	66 27       	eor	r22, r22
 c0c:	b0 0d       	add	r27, r0
 c0e:	a1 1d       	adc	r26, r1
 c10:	66 1f       	adc	r22, r22
 c12:	82 9f       	mul	r24, r18
 c14:	22 27       	eor	r18, r18
 c16:	b0 0d       	add	r27, r0
 c18:	a1 1d       	adc	r26, r1
 c1a:	62 1f       	adc	r22, r18
 c1c:	73 9f       	mul	r23, r19
 c1e:	b0 0d       	add	r27, r0
 c20:	a1 1d       	adc	r26, r1
 c22:	62 1f       	adc	r22, r18
 c24:	83 9f       	mul	r24, r19
 c26:	a0 0d       	add	r26, r0
 c28:	61 1d       	adc	r22, r1
 c2a:	22 1f       	adc	r18, r18
 c2c:	74 9f       	mul	r23, r20
 c2e:	33 27       	eor	r19, r19
 c30:	a0 0d       	add	r26, r0
 c32:	61 1d       	adc	r22, r1
 c34:	23 1f       	adc	r18, r19
 c36:	84 9f       	mul	r24, r20
 c38:	60 0d       	add	r22, r0
 c3a:	21 1d       	adc	r18, r1
 c3c:	82 2f       	mov	r24, r18
 c3e:	76 2f       	mov	r23, r22
 c40:	6a 2f       	mov	r22, r26
 c42:	11 24       	eor	r1, r1
 c44:	9f 57       	subi	r25, 0x7F	; 127
 c46:	50 40       	sbci	r21, 0x00	; 0
 c48:	8a f0       	brmi	.+34     	; 0xc6c <__mulsf3_pse+0x84>
 c4a:	e1 f0       	breq	.+56     	; 0xc84 <__mulsf3_pse+0x9c>
 c4c:	88 23       	and	r24, r24
 c4e:	4a f0       	brmi	.+18     	; 0xc62 <__mulsf3_pse+0x7a>
 c50:	ee 0f       	add	r30, r30
 c52:	ff 1f       	adc	r31, r31
 c54:	bb 1f       	adc	r27, r27
 c56:	66 1f       	adc	r22, r22
 c58:	77 1f       	adc	r23, r23
 c5a:	88 1f       	adc	r24, r24
 c5c:	91 50       	subi	r25, 0x01	; 1
 c5e:	50 40       	sbci	r21, 0x00	; 0
 c60:	a9 f7       	brne	.-22     	; 0xc4c <__mulsf3_pse+0x64>
 c62:	9e 3f       	cpi	r25, 0xFE	; 254
 c64:	51 05       	cpc	r21, r1
 c66:	70 f0       	brcs	.+28     	; 0xc84 <__mulsf3_pse+0x9c>
 c68:	60 cf       	rjmp	.-320    	; 0xb2a <__fp_inf>
 c6a:	aa cf       	rjmp	.-172    	; 0xbc0 <__fp_szero>
 c6c:	5f 3f       	cpi	r21, 0xFF	; 255
 c6e:	ec f3       	brlt	.-6      	; 0xc6a <__mulsf3_pse+0x82>
 c70:	98 3e       	cpi	r25, 0xE8	; 232
 c72:	dc f3       	brlt	.-10     	; 0xc6a <__mulsf3_pse+0x82>
 c74:	86 95       	lsr	r24
 c76:	77 95       	ror	r23
 c78:	67 95       	ror	r22
 c7a:	b7 95       	ror	r27
 c7c:	f7 95       	ror	r31
 c7e:	e7 95       	ror	r30
 c80:	9f 5f       	subi	r25, 0xFF	; 255
 c82:	c1 f7       	brne	.-16     	; 0xc74 <__mulsf3_pse+0x8c>
 c84:	fe 2b       	or	r31, r30
 c86:	88 0f       	add	r24, r24
 c88:	91 1d       	adc	r25, r1
 c8a:	96 95       	lsr	r25
 c8c:	87 95       	ror	r24
 c8e:	97 f9       	bld	r25, 7
 c90:	08 95       	ret

00000c92 <strcmp>:
 c92:	fb 01       	movw	r30, r22
 c94:	dc 01       	movw	r26, r24
 c96:	8d 91       	ld	r24, X+
 c98:	01 90       	ld	r0, Z+
 c9a:	80 19       	sub	r24, r0
 c9c:	01 10       	cpse	r0, r1
 c9e:	d9 f3       	breq	.-10     	; 0xc96 <strcmp+0x4>
 ca0:	99 0b       	sbc	r25, r25
 ca2:	08 95       	ret

00000ca4 <_exit>:
 ca4:	f8 94       	cli

00000ca6 <__stop_program>:
 ca6:	ff cf       	rjmp	.-2      	; 0xca6 <__stop_program>
