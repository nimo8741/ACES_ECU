
ACES_ESB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000882  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000080e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  00800200  00800200  00000882  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000882  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  000008f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002014  00000000  00000000  00000a24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001050  00000000  00000000  00002a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ce5  00000000  00000000  00003a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000037c  00000000  00000000  00004770  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000797  00000000  00000000  00004aec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b11  00000000  00000000  00005283  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00005d94  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	65 c0       	rjmp	.+202    	; 0xcc <__ctors_end>
   2:	00 00       	nop
   4:	75 c0       	rjmp	.+234    	; 0xf0 <__bad_interrupt>
   6:	00 00       	nop
   8:	73 c0       	rjmp	.+230    	; 0xf0 <__bad_interrupt>
   a:	00 00       	nop
   c:	ca c2       	rjmp	.+1428   	; 0x5a2 <__vector_3>
   e:	00 00       	nop
  10:	6f c0       	rjmp	.+222    	; 0xf0 <__bad_interrupt>
  12:	00 00       	nop
  14:	6d c0       	rjmp	.+218    	; 0xf0 <__bad_interrupt>
  16:	00 00       	nop
  18:	6b c0       	rjmp	.+214    	; 0xf0 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	69 c0       	rjmp	.+210    	; 0xf0 <__bad_interrupt>
  1e:	00 00       	nop
  20:	67 c0       	rjmp	.+206    	; 0xf0 <__bad_interrupt>
  22:	00 00       	nop
  24:	65 c0       	rjmp	.+202    	; 0xf0 <__bad_interrupt>
  26:	00 00       	nop
  28:	63 c0       	rjmp	.+198    	; 0xf0 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	61 c0       	rjmp	.+194    	; 0xf0 <__bad_interrupt>
  2e:	00 00       	nop
  30:	5f c0       	rjmp	.+190    	; 0xf0 <__bad_interrupt>
  32:	00 00       	nop
  34:	5d c0       	rjmp	.+186    	; 0xf0 <__bad_interrupt>
  36:	00 00       	nop
  38:	5b c0       	rjmp	.+182    	; 0xf0 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	59 c0       	rjmp	.+178    	; 0xf0 <__bad_interrupt>
  3e:	00 00       	nop
  40:	57 c0       	rjmp	.+174    	; 0xf0 <__bad_interrupt>
  42:	00 00       	nop
  44:	55 c0       	rjmp	.+170    	; 0xf0 <__bad_interrupt>
  46:	00 00       	nop
  48:	53 c0       	rjmp	.+166    	; 0xf0 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	51 c0       	rjmp	.+162    	; 0xf0 <__bad_interrupt>
  4e:	00 00       	nop
  50:	4f c0       	rjmp	.+158    	; 0xf0 <__bad_interrupt>
  52:	00 00       	nop
  54:	4d c0       	rjmp	.+154    	; 0xf0 <__bad_interrupt>
  56:	00 00       	nop
  58:	4b c0       	rjmp	.+150    	; 0xf0 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	49 c0       	rjmp	.+146    	; 0xf0 <__bad_interrupt>
  5e:	00 00       	nop
  60:	47 c0       	rjmp	.+142    	; 0xf0 <__bad_interrupt>
  62:	00 00       	nop
  64:	8d c0       	rjmp	.+282    	; 0x180 <__vector_25>
  66:	00 00       	nop
  68:	43 c0       	rjmp	.+134    	; 0xf0 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	41 c0       	rjmp	.+130    	; 0xf0 <__bad_interrupt>
  6e:	00 00       	nop
  70:	3f c0       	rjmp	.+126    	; 0xf0 <__bad_interrupt>
  72:	00 00       	nop
  74:	3d c0       	rjmp	.+122    	; 0xf0 <__bad_interrupt>
  76:	00 00       	nop
  78:	3b c0       	rjmp	.+118    	; 0xf0 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	39 c0       	rjmp	.+114    	; 0xf0 <__bad_interrupt>
  7e:	00 00       	nop
  80:	37 c0       	rjmp	.+110    	; 0xf0 <__bad_interrupt>
  82:	00 00       	nop
  84:	35 c0       	rjmp	.+106    	; 0xf0 <__bad_interrupt>
  86:	00 00       	nop
  88:	33 c0       	rjmp	.+102    	; 0xf0 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	31 c0       	rjmp	.+98     	; 0xf0 <__bad_interrupt>
  8e:	00 00       	nop
  90:	2f c0       	rjmp	.+94     	; 0xf0 <__bad_interrupt>
  92:	00 00       	nop
  94:	2d c0       	rjmp	.+90     	; 0xf0 <__bad_interrupt>
  96:	00 00       	nop
  98:	2b c0       	rjmp	.+86     	; 0xf0 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	29 c0       	rjmp	.+82     	; 0xf0 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	27 c0       	rjmp	.+78     	; 0xf0 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	25 c0       	rjmp	.+74     	; 0xf0 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	23 c0       	rjmp	.+70     	; 0xf0 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	21 c0       	rjmp	.+66     	; 0xf0 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	1f c0       	rjmp	.+62     	; 0xf0 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	8d c2       	rjmp	.+1306   	; 0x5d0 <__vector_45>
  b6:	00 00       	nop
  b8:	1b c0       	rjmp	.+54     	; 0xf0 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	19 c0       	rjmp	.+50     	; 0xf0 <__bad_interrupt>
  be:	00 00       	nop
  c0:	17 c0       	rjmp	.+46     	; 0xf0 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	15 c0       	rjmp	.+42     	; 0xf0 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	14 c0       	rjmp	.+40     	; 0xf2 <__vector_50>
	...

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d1 e2       	ldi	r29, 0x21	; 33
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61
  d8:	00 e0       	ldi	r16, 0x00	; 0
  da:	0c bf       	out	0x3c, r16	; 60

000000dc <__do_clear_bss>:
  dc:	22 e0       	ldi	r18, 0x02	; 2
  de:	a0 e0       	ldi	r26, 0x00	; 0
  e0:	b2 e0       	ldi	r27, 0x02	; 2
  e2:	01 c0       	rjmp	.+2      	; 0xe6 <.do_clear_bss_start>

000000e4 <.do_clear_bss_loop>:
  e4:	1d 92       	st	X+, r1

000000e6 <.do_clear_bss_start>:
  e6:	a5 34       	cpi	r26, 0x45	; 69
  e8:	b2 07       	cpc	r27, r18
  ea:	e1 f7       	brne	.-8      	; 0xe4 <.do_clear_bss_loop>
  ec:	26 d3       	rcall	.+1612   	; 0x73a <main>
  ee:	8d c3       	rjmp	.+1818   	; 0x80a <_exit>

000000f0 <__bad_interrupt>:
  f0:	87 cf       	rjmp	.-242    	; 0x0 <__vectors>

000000f2 <__vector_50>:
#include <string.h>
#include "ESB_funcs.h"


ISR(TIMER5_OVF_vect)   // This means that it has been too long since data has been received from the ECU
{
  f2:	1f 92       	push	r1
  f4:	0f 92       	push	r0
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	0f 92       	push	r0
  fa:	11 24       	eor	r1, r1
  fc:	0b b6       	in	r0, 0x3b	; 59
  fe:	0f 92       	push	r0
 100:	2f 93       	push	r18
 102:	3f 93       	push	r19
 104:	4f 93       	push	r20
 106:	5f 93       	push	r21
 108:	6f 93       	push	r22
 10a:	7f 93       	push	r23
 10c:	8f 93       	push	r24
 10e:	9f 93       	push	r25
 110:	af 93       	push	r26
 112:	bf 93       	push	r27
 114:	ef 93       	push	r30
 116:	ff 93       	push	r31
	// If it makes it in here then it is assumed that the ECU and ESB have gotten disconnected
	assign_bit(&TCCR5B, CS52, 0);    // turn off the timer for now
 118:	40 e0       	ldi	r20, 0x00	; 0
 11a:	62 e0       	ldi	r22, 0x02	; 2
 11c:	81 e2       	ldi	r24, 0x21	; 33
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	ad d1       	rcall	.+858    	; 0x47c <assign_bit>
	//connected = 0;
	//shutdown();     // shutdown the engine    don't want to do this for now until the timers are flushed out

}
 122:	ff 91       	pop	r31
 124:	ef 91       	pop	r30
 126:	bf 91       	pop	r27
 128:	af 91       	pop	r26
 12a:	9f 91       	pop	r25
 12c:	8f 91       	pop	r24
 12e:	7f 91       	pop	r23
 130:	6f 91       	pop	r22
 132:	5f 91       	pop	r21
 134:	4f 91       	pop	r20
 136:	3f 91       	pop	r19
 138:	2f 91       	pop	r18
 13a:	0f 90       	pop	r0
 13c:	0b be       	out	0x3b, r0	; 59
 13e:	0f 90       	pop	r0
 140:	0f be       	out	0x3f, r0	; 63
 142:	0f 90       	pop	r0
 144:	1f 90       	pop	r1
 146:	18 95       	reti

00000148 <sendToECU>:
		}
	}
}

void sendToECU(uint8_t len)
{
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
	// this will send the number of character in ESBmessage up to len
	cli();
 14c:	f8 94       	cli
	for(uint8_t i = 0; i < len; i++)
 14e:	88 23       	and	r24, r24
 150:	99 f0       	breq	.+38     	; 0x178 <sendToECU+0x30>
 152:	a4 e3       	ldi	r26, 0x34	; 52
 154:	b2 e0       	ldi	r27, 0x02	; 2
 156:	81 50       	subi	r24, 0x01	; 1
 158:	28 2f       	mov	r18, r24
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	2b 5c       	subi	r18, 0xCB	; 203
 15e:	3d 4f       	sbci	r19, 0xFD	; 253
	{
		while ( !( UCSR0A & (1<<UDRE0)) );
 160:	e0 ec       	ldi	r30, 0xC0	; 192
 162:	f0 e0       	ldi	r31, 0x00	; 0
		/* Put data into buffer, sends the data */
		UDR0 = ECUtransmit[i];
 164:	c6 ec       	ldi	r28, 0xC6	; 198
 166:	d0 e0       	ldi	r29, 0x00	; 0
{
	// this will send the number of character in ESBmessage up to len
	cli();
	for(uint8_t i = 0; i < len; i++)
	{
		while ( !( UCSR0A & (1<<UDRE0)) );
 168:	80 81       	ld	r24, Z
 16a:	85 ff       	sbrs	r24, 5
 16c:	fd cf       	rjmp	.-6      	; 0x168 <sendToECU+0x20>
		/* Put data into buffer, sends the data */
		UDR0 = ECUtransmit[i];
 16e:	8d 91       	ld	r24, X+
 170:	88 83       	st	Y, r24

void sendToECU(uint8_t len)
{
	// this will send the number of character in ESBmessage up to len
	cli();
	for(uint8_t i = 0; i < len; i++)
 172:	a2 17       	cp	r26, r18
 174:	b3 07       	cpc	r27, r19
 176:	c1 f7       	brne	.-16     	; 0x168 <sendToECU+0x20>
	{
		while ( !( UCSR0A & (1<<UDRE0)) );
		/* Put data into buffer, sends the data */
		UDR0 = ECUtransmit[i];
	}
	sei();
 178:	78 94       	sei
}
 17a:	df 91       	pop	r29
 17c:	cf 91       	pop	r28
 17e:	08 95       	ret

00000180 <__vector_25>:
	
	hallDone = 0;                          // reset this we have already used the new data
}

ISR(USART0_RX_vect)
{
 180:	1f 92       	push	r1
 182:	0f 92       	push	r0
 184:	0f b6       	in	r0, 0x3f	; 63
 186:	0f 92       	push	r0
 188:	11 24       	eor	r1, r1
 18a:	0b b6       	in	r0, 0x3b	; 59
 18c:	0f 92       	push	r0
 18e:	2f 93       	push	r18
 190:	3f 93       	push	r19
 192:	4f 93       	push	r20
 194:	5f 93       	push	r21
 196:	6f 93       	push	r22
 198:	7f 93       	push	r23
 19a:	8f 93       	push	r24
 19c:	9f 93       	push	r25
 19e:	af 93       	push	r26
 1a0:	bf 93       	push	r27
 1a2:	ef 93       	push	r30
 1a4:	ff 93       	push	r31
	// This will get invoked if data is received from the ECU
	uint8_t data = UDR0;
 1a6:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	hasInterrupted = 1;            // set this flag so other functions will know if they have been interrupted
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <hasInterrupted>
	if (!commandCode)
 1b0:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <commandCode>
 1b4:	81 11       	cpse	r24, r1
 1b6:	3e c0       	rjmp	.+124    	; 0x234 <__vector_25+0xb4>
	{
		
		if (data == 'S' && connected){          // Handles if the ECU wants a shutdown
 1b8:	93 35       	cpi	r25, 0x53	; 83
 1ba:	59 f4       	brne	.+22     	; 0x1d2 <__vector_25+0x52>
 1bc:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <connected>
 1c0:	88 23       	and	r24, r24
 1c2:	09 f4       	brne	.+2      	; 0x1c6 <__vector_25+0x46>
 1c4:	9e c0       	rjmp	.+316    	; 0x302 <__vector_25+0x182>
			//shutdown();
			ECUtransmit[0] = 'K';
 1c6:	8b e4       	ldi	r24, 0x4B	; 75
 1c8:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <ECUtransmit>
			sendToECU(1);
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	bc df       	rcall	.-136    	; 0x148 <sendToECU>
 1d0:	98 c0       	rjmp	.+304    	; 0x302 <__vector_25+0x182>
		}
		else if (data == 'r' && connected){     // Handles if the ECU wants an engine startup
 1d2:	92 37       	cpi	r25, 0x72	; 114
 1d4:	61 f4       	brne	.+24     	; 0x1ee <__vector_25+0x6e>
 1d6:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <connected>
 1da:	88 23       	and	r24, r24
 1dc:	09 f4       	brne	.+2      	; 0x1e0 <__vector_25+0x60>
			startup();
 1de:	91 c0       	rjmp	.+290    	; 0x302 <__vector_25+0x182>
 1e0:	30 d1       	rcall	.+608    	; 0x442 <startup>
			ECUtransmit[0] = 'K';
 1e2:	8b e4       	ldi	r24, 0x4B	; 75
 1e4:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <ECUtransmit>
			sendToECU(1);
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	ae df       	rcall	.-164    	; 0x148 <sendToECU>
 1ec:	8a c0       	rjmp	.+276    	; 0x302 <__vector_25+0x182>
		}
		else if (data == 't' && connected){     // Handles if the ECU wants a specific throttle
 1ee:	94 37       	cpi	r25, 0x74	; 116
 1f0:	49 f4       	brne	.+18     	; 0x204 <__vector_25+0x84>
 1f2:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <connected>
 1f6:	88 23       	and	r24, r24
 1f8:	09 f4       	brne	.+2      	; 0x1fc <__vector_25+0x7c>
 1fa:	83 c0       	rjmp	.+262    	; 0x302 <__vector_25+0x182>
			commandCode = 1;
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <commandCode>
 202:	7f c0       	rjmp	.+254    	; 0x302 <__vector_25+0x182>
		}
		else if (data == 'N' && connected){     // Handles if the ECU is sending the normal data
 204:	9e 34       	cpi	r25, 0x4E	; 78
 206:	79 f4       	brne	.+30     	; 0x226 <__vector_25+0xa6>
 208:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <connected>
 20c:	88 23       	and	r24, r24
 20e:	09 f4       	brne	.+2      	; 0x212 <__vector_25+0x92>
 210:	78 c0       	rjmp	.+240    	; 0x302 <__vector_25+0x182>
			commandCode = 2;
 212:	82 e0       	ldi	r24, 0x02	; 2
 214:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <commandCode>
			TCNT5 = ECU_timer_val;              // phew, made it before the timer overflow
 218:	8c ed       	ldi	r24, 0xDC	; 220
 21a:	9b e0       	ldi	r25, 0x0B	; 11
 21c:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <__TEXT_REGION_LENGTH__+0x700125>
 220:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
 224:	6e c0       	rjmp	.+220    	; 0x302 <__vector_25+0x182>
		}
		else if (data == 'A'){     // Handles if the ECU wants to connect with the ESB
 226:	91 34       	cpi	r25, 0x41	; 65
 228:	09 f0       	breq	.+2      	; 0x22c <__vector_25+0xac>
 22a:	6b c0       	rjmp	.+214    	; 0x302 <__vector_25+0x182>
			commandCode = 3;
 22c:	83 e0       	ldi	r24, 0x03	; 3
 22e:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <commandCode>
 232:	67 c0       	rjmp	.+206    	; 0x302 <__vector_25+0x182>
		}	
	}
	else if (commandCode == 1){
 234:	81 30       	cpi	r24, 0x01	; 1
 236:	51 f4       	brne	.+20     	; 0x24c <__vector_25+0xcc>
		throttle_val = data;
 238:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <_edata>
		ECUtransmit[0] = 'K';
 23c:	8b e4       	ldi	r24, 0x4B	; 75
 23e:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <ECUtransmit>
		sendToECU(1);
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	81 df       	rcall	.-254    	; 0x148 <sendToECU>
		commandCode = 0;
 246:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <commandCode>
 24a:	5b c0       	rjmp	.+182    	; 0x302 <__vector_25+0x182>
	}
	else if (commandCode == 2){              // This means the ESB is receiving the normal data from the ECU
 24c:	82 30       	cpi	r24, 0x02	; 2
 24e:	01 f5       	brne	.+64     	; 0x290 <__vector_25+0x110>
		ECUreceiveCount++;
 250:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <ECUreceiveCount>
 254:	8f 5f       	subi	r24, 0xFF	; 255
 256:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <ECUreceiveCount>
		switch (ECUreceiveCount){
 25a:	82 30       	cpi	r24, 0x02	; 2
 25c:	61 f0       	breq	.+24     	; 0x276 <__vector_25+0xf6>
 25e:	18 f4       	brcc	.+6      	; 0x266 <__vector_25+0xe6>
 260:	81 30       	cpi	r24, 0x01	; 1
 262:	31 f0       	breq	.+12     	; 0x270 <__vector_25+0xf0>
 264:	4e c0       	rjmp	.+156    	; 0x302 <__vector_25+0x182>
 266:	83 30       	cpi	r24, 0x03	; 3
 268:	49 f0       	breq	.+18     	; 0x27c <__vector_25+0xfc>
 26a:	84 30       	cpi	r24, 0x04	; 4
 26c:	51 f0       	breq	.+20     	; 0x282 <__vector_25+0x102>
 26e:	49 c0       	rjmp	.+146    	; 0x302 <__vector_25+0x182>
			case 1:       // This means it is the LSB of the flow rate
				massFlow.c[0] = data;
 270:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <massFlow>
				break;
 274:	46 c0       	rjmp	.+140    	; 0x302 <__vector_25+0x182>
				
			case 2:
				massFlow.c[1] = data;
 276:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <massFlow+0x1>
				break;
 27a:	43 c0       	rjmp	.+134    	; 0x302 <__vector_25+0x182>
				
			case 3:
				massFlow.c[2] = data;
 27c:	90 93 12 02 	sts	0x0212, r25	; 0x800212 <massFlow+0x2>
				break;
 280:	40 c0       	rjmp	.+128    	; 0x302 <__vector_25+0x182>
				
			case 4:
				massFlow.c[3] = data;
 282:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <massFlow+0x3>
				ECUreceiveCount = 0;
 286:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <ECUreceiveCount>
				commandCode = 0;
 28a:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <commandCode>
				break;
 28e:	39 c0       	rjmp	.+114    	; 0x302 <__vector_25+0x182>
		}
	}
	else if (commandCode == 3){         // This means that the ECU is trying to connect with the ESB
 290:	83 30       	cpi	r24, 0x03	; 3
 292:	b9 f5       	brne	.+110    	; 0x302 <__vector_25+0x182>
		ECUreceiveCount++;
 294:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <ECUreceiveCount>
 298:	8f 5f       	subi	r24, 0xFF	; 255
 29a:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <ECUreceiveCount>
		switch (ECUreceiveCount)
 29e:	82 30       	cpi	r24, 0x02	; 2
 2a0:	59 f0       	breq	.+22     	; 0x2b8 <__vector_25+0x138>
 2a2:	83 30       	cpi	r24, 0x03	; 3
 2a4:	81 f0       	breq	.+32     	; 0x2c6 <__vector_25+0x146>
 2a6:	81 30       	cpi	r24, 0x01	; 1
 2a8:	61 f5       	brne	.+88     	; 0x302 <__vector_25+0x182>
		{
			case 1:
				if (data != 'C'){
 2aa:	93 34       	cpi	r25, 0x43	; 67
 2ac:	51 f1       	breq	.+84     	; 0x302 <__vector_25+0x182>
					commandCode = 0;
 2ae:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <commandCode>
					//connected = 0;
					ECUreceiveCount = 0;
 2b2:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <ECUreceiveCount>
 2b6:	25 c0       	rjmp	.+74     	; 0x302 <__vector_25+0x182>
				}
				break;
				
			case 2:
				if (data != 'E'){
 2b8:	95 34       	cpi	r25, 0x45	; 69
 2ba:	19 f1       	breq	.+70     	; 0x302 <__vector_25+0x182>
					commandCode = 0;
 2bc:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <commandCode>
					//connected = 0;
					ECUreceiveCount = 0;
 2c0:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <ECUreceiveCount>
 2c4:	1e c0       	rjmp	.+60     	; 0x302 <__vector_25+0x182>
				}
				break;
				
			case 3:
				if (data == 'S'){
 2c6:	93 35       	cpi	r25, 0x53	; 83
 2c8:	c1 f4       	brne	.+48     	; 0x2fa <__vector_25+0x17a>
					connected = 1;
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <connected>
					ECUtransmit[0] = 'D';
 2d0:	e4 e3       	ldi	r30, 0x34	; 52
 2d2:	f2 e0       	ldi	r31, 0x02	; 2
 2d4:	84 e4       	ldi	r24, 0x44	; 68
 2d6:	80 83       	st	Z, r24
					ECUtransmit[1] = 'A';
 2d8:	81 e4       	ldi	r24, 0x41	; 65
 2da:	81 83       	std	Z+1, r24	; 0x01
					ECUtransmit[2] = 'L';
 2dc:	8c e4       	ldi	r24, 0x4C	; 76
					ECUtransmit[3] = 'E';
 2de:	82 83       	std	Z+2, r24	; 0x02
 2e0:	85 e4       	ldi	r24, 0x45	; 69
					sendToECU(4);
 2e2:	83 83       	std	Z+3, r24	; 0x03
 2e4:	84 e0       	ldi	r24, 0x04	; 4
 2e6:	30 df       	rcall	.-416    	; 0x148 <sendToECU>
					TCNT4 = HallTime * 11;    // This will put the comm lines on off phases, the multiplier was found experimentally
 2e8:	88 e9       	ldi	r24, 0x98	; 152
 2ea:	96 e7       	ldi	r25, 0x76	; 118
 2ec:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7000a5>
 2f0:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7000a4>
					TCCR5B = (1 << CS52);    // This will start timer 5 with a prescalar of 256, makes 1 second timer
 2f4:	84 e0       	ldi	r24, 0x04	; 4
 2f6:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
					
				}
				else{
					//connected = 0;
				}
				commandCode = 0;
 2fa:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <commandCode>
				ECUreceiveCount = 0;
 2fe:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <ECUreceiveCount>
				break;
		}
	}
}
 302:	ff 91       	pop	r31
 304:	ef 91       	pop	r30
 306:	bf 91       	pop	r27
 308:	af 91       	pop	r26
 30a:	9f 91       	pop	r25
 30c:	8f 91       	pop	r24
 30e:	7f 91       	pop	r23
 310:	6f 91       	pop	r22
 312:	5f 91       	pop	r21
 314:	4f 91       	pop	r20
 316:	3f 91       	pop	r19
 318:	2f 91       	pop	r18
 31a:	0f 90       	pop	r0
 31c:	0b be       	out	0x3b, r0	; 59
 31e:	0f 90       	pop	r0
 320:	0f be       	out	0x3f, r0	; 63
 322:	0f 90       	pop	r0
 324:	1f 90       	pop	r1
 326:	18 95       	reti

00000328 <countOnes>:
}

unsigned char countOnes(unsigned char byte)
{
	unsigned char count = 0;
	while (byte)
 328:	88 23       	and	r24, r24
 32a:	39 f0       	breq	.+14     	; 0x33a <countOnes+0x12>
 32c:	90 e0       	ldi	r25, 0x00	; 0
	{
		count += byte & 1;    // this was essentially lifted from geeksforgeeks.com
 32e:	28 2f       	mov	r18, r24
 330:	21 70       	andi	r18, 0x01	; 1
 332:	92 0f       	add	r25, r18
		byte >>= 1;
 334:	86 95       	lsr	r24
}

unsigned char countOnes(unsigned char byte)
{
	unsigned char count = 0;
	while (byte)
 336:	d9 f7       	brne	.-10     	; 0x32e <countOnes+0x6>
 338:	01 c0       	rjmp	.+2      	; 0x33c <countOnes+0x14>
	return parity;
}

unsigned char countOnes(unsigned char byte)
{
	unsigned char count = 0;
 33a:	90 e0       	ldi	r25, 0x00	; 0
	{
		count += byte & 1;    // this was essentially lifted from geeksforgeeks.com
		byte >>= 1;
	}
	return count;
 33c:	89 2f       	mov	r24, r25
 33e:	08 95       	ret

00000340 <calculateParity>:
	}
	sei();
}

uint8_t calculateParity(uint8_t message[], uint8_t start_index)
{
 340:	af 92       	push	r10
 342:	bf 92       	push	r11
 344:	cf 92       	push	r12
 346:	df 92       	push	r13
 348:	ef 92       	push	r14
 34a:	ff 92       	push	r15
 34c:	0f 93       	push	r16
 34e:	1f 93       	push	r17
 350:	cf 93       	push	r28
 352:	df 93       	push	r29
 354:	7c 01       	movw	r14, r24
	
	// first need to get the number of high bits in the first three bytes in the set
	for (unsigned set = 0; set < 2; set++){
		unsigned char count = 0;
		for (unsigned char i = 0; i < 3; i++){
			count += countOnes(message[start_index + set*3 + i]);
 356:	c6 2e       	mov	r12, r22
 358:	d1 2c       	mov	r13, r1
 35a:	5c 01       	movw	r10, r24
 35c:	ac 0c       	add	r10, r12
 35e:	bd 1c       	adc	r11, r13
 360:	e6 01       	movw	r28, r12
 362:	23 96       	adiw	r28, 0x03	; 3
 364:	c8 0f       	add	r28, r24
 366:	d9 1f       	adc	r29, r25
 368:	10 e0       	ldi	r17, 0x00	; 0
 36a:	f5 01       	movw	r30, r10
 36c:	81 91       	ld	r24, Z+
 36e:	5f 01       	movw	r10, r30
 370:	db df       	rcall	.-74     	; 0x328 <countOnes>
 372:	18 0f       	add	r17, r24
	uint8_t parity = 0;
	
	// first need to get the number of high bits in the first three bytes in the set
	for (unsigned set = 0; set < 2; set++){
		unsigned char count = 0;
		for (unsigned char i = 0; i < 3; i++){
 374:	ca 15       	cp	r28, r10
 376:	db 05       	cpc	r29, r11
 378:	c1 f7       	brne	.-16     	; 0x36a <calculateParity+0x2a>
			count += countOnes(message[start_index + set*3 + i]);
		}
		// now that I have the count for this set, I need to take the modulo
		count = count % 16;   // Modulo with 16 because I have 4 bits to play with
 37a:	1f 70       	andi	r17, 0x0F	; 15
 37c:	f6 e0       	ldi	r31, 0x06	; 6
 37e:	cf 0e       	add	r12, r31
 380:	d1 1c       	adc	r13, r1
 382:	ec 0c       	add	r14, r12
 384:	fd 1c       	adc	r15, r13
		
		// now add this into the parity byte
		parity |= count << (4 * set);   // this will make it so that bytes 0-2 will take up the LSB of the parity byte
 386:	00 e0       	ldi	r16, 0x00	; 0
	
	// first need to get the number of high bits in the first three bytes in the set
	for (unsigned set = 0; set < 2; set++){
		unsigned char count = 0;
		for (unsigned char i = 0; i < 3; i++){
			count += countOnes(message[start_index + set*3 + i]);
 388:	89 91       	ld	r24, Y+
 38a:	ce df       	rcall	.-100    	; 0x328 <countOnes>
 38c:	08 0f       	add	r16, r24
	uint8_t parity = 0;
	
	// first need to get the number of high bits in the first three bytes in the set
	for (unsigned set = 0; set < 2; set++){
		unsigned char count = 0;
		for (unsigned char i = 0; i < 3; i++){
 38e:	ec 16       	cp	r14, r28
 390:	fd 06       	cpc	r15, r29
 392:	d1 f7       	brne	.-12     	; 0x388 <calculateParity+0x48>
		}
		// now that I have the count for this set, I need to take the modulo
		count = count % 16;   // Modulo with 16 because I have 4 bits to play with
		
		// now add this into the parity byte
		parity |= count << (4 * set);   // this will make it so that bytes 0-2 will take up the LSB of the parity byte
 394:	80 2f       	mov	r24, r16
 396:	82 95       	swap	r24
 398:	80 7f       	andi	r24, 0xF0	; 240
	}
	// now copy this byte into memory
	return parity;
}
 39a:	81 2b       	or	r24, r17
 39c:	df 91       	pop	r29
 39e:	cf 91       	pop	r28
 3a0:	1f 91       	pop	r17
 3a2:	0f 91       	pop	r16
 3a4:	ff 90       	pop	r15
 3a6:	ef 90       	pop	r14
 3a8:	df 90       	pop	r13
 3aa:	cf 90       	pop	r12
 3ac:	bf 90       	pop	r11
 3ae:	af 90       	pop	r10
 3b0:	08 95       	ret

000003b2 <package_message>:
	//shutdown();     // shutdown the engine    don't want to do this for now until the timers are flushed out

}

void package_message(void)
{
 3b2:	cf 93       	push	r28
 3b4:	df 93       	push	r29
	hallEffect = 34567;
 3b6:	27 e0       	ldi	r18, 0x07	; 7
 3b8:	37 e8       	ldi	r19, 0x87	; 135
 3ba:	30 93 43 02 	sts	0x0243, r19	; 0x800243 <hallEffect+0x1>
 3be:	20 93 42 02 	sts	0x0242, r18	; 0x800242 <hallEffect>
	EGT = 12345;
 3c2:	80 e0       	ldi	r24, 0x00	; 0
 3c4:	94 ee       	ldi	r25, 0xE4	; 228
 3c6:	a0 e4       	ldi	r26, 0x40	; 64
 3c8:	b6 e4       	ldi	r27, 0x46	; 70
 3ca:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <EGT>
 3ce:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <EGT+0x1>
 3d2:	a0 93 21 02 	sts	0x0221, r26	; 0x800221 <EGT+0x2>
 3d6:	b0 93 22 02 	sts	0x0222, r27	; 0x800222 <EGT+0x3>
	glowPlug = 1;
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <glowPlug>
	ref_temp = 23456;
 3e0:	40 e0       	ldi	r20, 0x00	; 0
 3e2:	50 e4       	ldi	r21, 0x40	; 64
 3e4:	67 eb       	ldi	r22, 0xB7	; 183
 3e6:	76 e4       	ldi	r23, 0x46	; 70
 3e8:	40 93 23 02 	sts	0x0223, r20	; 0x800223 <ref_temp>
 3ec:	50 93 24 02 	sts	0x0224, r21	; 0x800224 <ref_temp+0x1>
 3f0:	60 93 25 02 	sts	0x0225, r22	; 0x800225 <ref_temp+0x2>
 3f4:	70 93 26 02 	sts	0x0226, r23	; 0x800226 <ref_temp+0x3>
	
	ECUtransmit[0] = opMode;
 3f8:	c4 e3       	ldi	r28, 0x34	; 52
 3fa:	d2 e0       	ldi	r29, 0x02	; 2
 3fc:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <opMode>
 400:	98 83       	st	Y, r25
	memcpy(ECUtransmit + 1, &hallEffect, sizeof(uint16_t));
 402:	3a 83       	std	Y+2, r19	; 0x02
 404:	29 83       	std	Y+1, r18	; 0x01
	memcpy(ECUtransmit + 3, &EGT, sizeof(float));
 406:	40 e0       	ldi	r20, 0x00	; 0
 408:	54 ee       	ldi	r21, 0xE4	; 228
 40a:	60 e4       	ldi	r22, 0x40	; 64
 40c:	76 e4       	ldi	r23, 0x46	; 70
 40e:	4b 83       	std	Y+3, r20	; 0x03
 410:	5c 83       	std	Y+4, r21	; 0x04
 412:	6d 83       	std	Y+5, r22	; 0x05
 414:	7e 83       	std	Y+6, r23	; 0x06
	memcpy(ECUtransmit + 7, &glowPlug, sizeof(uint8_t));
 416:	8f 83       	std	Y+7, r24	; 0x07
	memcpy(ECUtransmit + 8, &ref_temp, sizeof(float));
 418:	80 e0       	ldi	r24, 0x00	; 0
 41a:	90 e4       	ldi	r25, 0x40	; 64
 41c:	a7 eb       	ldi	r26, 0xB7	; 183
 41e:	b6 e4       	ldi	r27, 0x46	; 70
 420:	88 87       	std	Y+8, r24	; 0x08
 422:	99 87       	std	Y+9, r25	; 0x09
 424:	aa 87       	std	Y+10, r26	; 0x0a
 426:	bb 87       	std	Y+11, r27	; 0x0b
	ECUtransmit[12] = calculateParity(ECUtransmit, 0);
 428:	60 e0       	ldi	r22, 0x00	; 0
 42a:	ce 01       	movw	r24, r28
 42c:	89 df       	rcall	.-238    	; 0x340 <calculateParity>
 42e:	8c 87       	std	Y+12, r24	; 0x0c
	ECUtransmit[13] = calculateParity(ECUtransmit, 6);
 430:	66 e0       	ldi	r22, 0x06	; 6
 432:	ce 01       	movw	r24, r28
 434:	85 df       	rcall	.-246    	; 0x340 <calculateParity>
 436:	8d 87       	std	Y+13, r24	; 0x0d
	
	hallDone = 0;                          // reset this we have already used the new data
 438:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <hallDone>
}
 43c:	df 91       	pop	r29
 43e:	cf 91       	pop	r28
 440:	08 95       	ret

00000442 <startup>:
	opMode = 4;    // An opMode of 4 means that the engine will enter the cooling mode
}

void startup(void)
{
	if (startUpLockOut){
 442:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <startUpLockOut>
 446:	88 23       	and	r24, r24
 448:	c1 f0       	breq	.+48     	; 0x47a <startup+0x38>
		if (hallEffect < 10 && EGT < 50){
 44a:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <hallEffect>
 44e:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <hallEffect+0x1>
 452:	0a 97       	sbiw	r24, 0x0a	; 10
 454:	90 f4       	brcc	.+36     	; 0x47a <startup+0x38>
 456:	20 e0       	ldi	r18, 0x00	; 0
 458:	30 e0       	ldi	r19, 0x00	; 0
 45a:	48 e4       	ldi	r20, 0x48	; 72
 45c:	52 e4       	ldi	r21, 0x42	; 66
 45e:	60 91 1f 02 	lds	r22, 0x021F	; 0x80021f <EGT>
 462:	70 91 20 02 	lds	r23, 0x0220	; 0x800220 <EGT+0x1>
 466:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <EGT+0x2>
 46a:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <EGT+0x3>
 46e:	68 d1       	rcall	.+720    	; 0x740 <__cmpsf2>
 470:	88 23       	and	r24, r24
 472:	1c f4       	brge	.+6      	; 0x47a <startup+0x38>
			startUpLockOut = 0;
 474:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <startUpLockOut>
			startup();              // restart the function so that it has the opportunity to restart
 478:	e4 cf       	rjmp	.-56     	; 0x442 <startup>
 47a:	08 95       	ret

0000047c <assign_bit>:
	OCR0A = (uint8_t) (255 - sMotor * 255.0 / pump_tot_V);             // When combine with a prescalar of 1024, this will have a period of 0.016384 seconds
	
	// Now set up the Glow plug on Timer 2 (this is an 8 bit timer instead of 16)
	TCCR2A |= (1 << WGM21) | (1 << WGM20) | (1 << COM2A0) | (1 << COM2A1);    // This is the same as for starter motor code
	TCCR2B |= (1 << WGM22);
	OCR2A = (uint8_t) (255 - gVolts * 255.0 / pump_tot_V);
 47c:	44 23       	and	r20, r20
 47e:	59 f0       	breq	.+22     	; 0x496 <assign_bit+0x1a>
 480:	50 e0       	ldi	r21, 0x00	; 0
 482:	02 c0       	rjmp	.+4      	; 0x488 <assign_bit+0xc>
 484:	44 0f       	add	r20, r20
 486:	55 1f       	adc	r21, r21
 488:	6a 95       	dec	r22
 48a:	e2 f7       	brpl	.-8      	; 0x484 <assign_bit+0x8>
 48c:	fc 01       	movw	r30, r24
 48e:	20 81       	ld	r18, Z
 490:	42 2b       	or	r20, r18
 492:	40 83       	st	Z, r20
 494:	08 95       	ret
 496:	fc 01       	movw	r30, r24
 498:	40 81       	ld	r20, Z
 49a:	21 e0       	ldi	r18, 0x01	; 1
 49c:	30 e0       	ldi	r19, 0x00	; 0
 49e:	02 c0       	rjmp	.+4      	; 0x4a4 <assign_bit+0x28>
 4a0:	22 0f       	add	r18, r18
 4a2:	33 1f       	adc	r19, r19
 4a4:	6a 95       	dec	r22
 4a6:	e2 f7       	brpl	.-8      	; 0x4a0 <assign_bit+0x24>
 4a8:	20 95       	com	r18
 4aa:	24 23       	and	r18, r20
 4ac:	20 83       	st	Z, r18
 4ae:	08 95       	ret

000004b0 <USART_Receive>:
 4b0:	f8 94       	cli
 4b2:	e0 ec       	ldi	r30, 0xC0	; 192
 4b4:	f0 e0       	ldi	r31, 0x00	; 0
 4b6:	80 81       	ld	r24, Z
 4b8:	85 ff       	sbrs	r24, 5
 4ba:	fd cf       	rjmp	.-6      	; 0x4b6 <USART_Receive+0x6>
 4bc:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 4c0:	e0 ec       	ldi	r30, 0xC0	; 192
 4c2:	f0 e0       	ldi	r31, 0x00	; 0
 4c4:	80 81       	ld	r24, Z
 4c6:	88 23       	and	r24, r24
 4c8:	ec f7       	brge	.-6      	; 0x4c4 <USART_Receive+0x14>
 4ca:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 4ce:	08 95       	ret

000004d0 <getTemp>:
 4d0:	fc 01       	movw	r30, r24
 4d2:	93 81       	ldd	r25, Z+3	; 0x03
 4d4:	92 ff       	sbrs	r25, 2
 4d6:	09 c0       	rjmp	.+18     	; 0x4ea <getTemp+0x1a>
 4d8:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <EGT>
 4dc:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <EGT+0x1>
 4e0:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <EGT+0x2>
 4e4:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <EGT+0x3>
 4e8:	08 95       	ret
 4ea:	91 ff       	sbrs	r25, 1
 4ec:	0d c0       	rjmp	.+26     	; 0x508 <getTemp+0x38>
 4ee:	80 e0       	ldi	r24, 0x00	; 0
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	a0 e8       	ldi	r26, 0x80	; 128
 4f4:	bf e3       	ldi	r27, 0x3F	; 63
 4f6:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <EGT>
 4fa:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <EGT+0x1>
 4fe:	a0 93 21 02 	sts	0x0221, r26	; 0x800221 <EGT+0x2>
 502:	b0 93 22 02 	sts	0x0222, r27	; 0x800222 <EGT+0x3>
 506:	08 95       	ret
 508:	90 ff       	sbrs	r25, 0
 50a:	0d c0       	rjmp	.+26     	; 0x526 <getTemp+0x56>
 50c:	80 e0       	ldi	r24, 0x00	; 0
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	a0 e0       	ldi	r26, 0x00	; 0
 512:	b0 e4       	ldi	r27, 0x40	; 64
 514:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <EGT>
 518:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <EGT+0x1>
 51c:	a0 93 21 02 	sts	0x0221, r26	; 0x800221 <EGT+0x2>
 520:	b0 93 22 02 	sts	0x0222, r27	; 0x800222 <EGT+0x3>
 524:	08 95       	ret
 526:	60 81       	ld	r22, Z
 528:	70 e0       	ldi	r23, 0x00	; 0
 52a:	76 2f       	mov	r23, r22
 52c:	66 27       	eor	r22, r22
 52e:	63 30       	cpi	r22, 0x03	; 3
 530:	71 05       	cpc	r23, r1
 532:	14 f4       	brge	.+4      	; 0x538 <getTemp+0x68>
 534:	63 e0       	ldi	r22, 0x03	; 3
 536:	70 e0       	ldi	r23, 0x00	; 0
 538:	80 e0       	ldi	r24, 0x00	; 0
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	05 d1       	rcall	.+522    	; 0x748 <__floatunsisf>
 53e:	60 93 1f 02 	sts	0x021F, r22	; 0x80021f <EGT>
 542:	70 93 20 02 	sts	0x0220, r23	; 0x800220 <EGT+0x1>
 546:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <EGT+0x2>
 54a:	90 93 22 02 	sts	0x0222, r25	; 0x800222 <EGT+0x3>
 54e:	08 95       	ret

00000550 <EGT_collect>:
 550:	ef 92       	push	r14
 552:	ff 92       	push	r15
 554:	0f 93       	push	r16
 556:	1f 93       	push	r17
 558:	cf 93       	push	r28
 55a:	df 93       	push	r29
 55c:	00 d0       	rcall	.+0      	; 0x55e <EGT_collect+0xe>
 55e:	1f 92       	push	r1
 560:	cd b7       	in	r28, 0x3d	; 61
 562:	de b7       	in	r29, 0x3e	; 62
 564:	73 98       	cbi	0x0e, 3	; 14
 566:	8e 01       	movw	r16, r28
 568:	0f 5f       	subi	r16, 0xFF	; 255
 56a:	1f 4f       	sbci	r17, 0xFF	; 255
 56c:	7e 01       	movw	r14, r28
 56e:	85 e0       	ldi	r24, 0x05	; 5
 570:	e8 0e       	add	r14, r24
 572:	f1 1c       	adc	r15, r1
 574:	9d df       	rcall	.-198    	; 0x4b0 <USART_Receive>
 576:	f8 01       	movw	r30, r16
 578:	81 93       	st	Z+, r24
 57a:	8f 01       	movw	r16, r30
 57c:	ee 15       	cp	r30, r14
 57e:	ff 05       	cpc	r31, r15
 580:	c9 f7       	brne	.-14     	; 0x574 <EGT_collect+0x24>
 582:	73 9a       	sbi	0x0e, 3	; 14
 584:	ce 01       	movw	r24, r28
 586:	01 96       	adiw	r24, 0x01	; 1
 588:	a3 df       	rcall	.-186    	; 0x4d0 <getTemp>
 58a:	13 df       	rcall	.-474    	; 0x3b2 <package_message>
 58c:	0f 90       	pop	r0
 58e:	0f 90       	pop	r0
 590:	0f 90       	pop	r0
 592:	0f 90       	pop	r0
 594:	df 91       	pop	r29
 596:	cf 91       	pop	r28
 598:	1f 91       	pop	r17
 59a:	0f 91       	pop	r16
 59c:	ff 90       	pop	r15
 59e:	ef 90       	pop	r14
 5a0:	08 95       	ret

000005a2 <__vector_3>:
 5a2:	1f 92       	push	r1
 5a4:	0f 92       	push	r0
 5a6:	0f b6       	in	r0, 0x3f	; 63
 5a8:	0f 92       	push	r0
 5aa:	11 24       	eor	r1, r1
 5ac:	8f 93       	push	r24
 5ae:	9f 93       	push	r25
 5b0:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <hallCount>
 5b4:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <hallCount+0x1>
 5b8:	01 96       	adiw	r24, 0x01	; 1
 5ba:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <hallCount+0x1>
 5be:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <hallCount>
 5c2:	9f 91       	pop	r25
 5c4:	8f 91       	pop	r24
 5c6:	0f 90       	pop	r0
 5c8:	0f be       	out	0x3f, r0	; 63
 5ca:	0f 90       	pop	r0
 5cc:	1f 90       	pop	r1
 5ce:	18 95       	reti

000005d0 <__vector_45>:
 5d0:	1f 92       	push	r1
 5d2:	0f 92       	push	r0
 5d4:	0f b6       	in	r0, 0x3f	; 63
 5d6:	0f 92       	push	r0
 5d8:	11 24       	eor	r1, r1
 5da:	2f 93       	push	r18
 5dc:	3f 93       	push	r19
 5de:	4f 93       	push	r20
 5e0:	8f 93       	push	r24
 5e2:	9f 93       	push	r25
 5e4:	20 91 28 02 	lds	r18, 0x0228	; 0x800228 <hallCount>
 5e8:	30 91 29 02 	lds	r19, 0x0229	; 0x800229 <hallCount+0x1>
 5ec:	48 e7       	ldi	r20, 0x78	; 120
 5ee:	42 9f       	mul	r20, r18
 5f0:	c0 01       	movw	r24, r0
 5f2:	43 9f       	mul	r20, r19
 5f4:	90 0d       	add	r25, r0
 5f6:	11 24       	eor	r1, r1
 5f8:	90 93 43 02 	sts	0x0243, r25	; 0x800243 <hallEffect+0x1>
 5fc:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <hallEffect>
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <hallDone>
 606:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <hallCount+0x1>
 60a:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <hallCount>
 60e:	88 ec       	ldi	r24, 0xC8	; 200
 610:	9a e0       	ldi	r25, 0x0A	; 10
 612:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7000a5>
 616:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7000a4>
 61a:	9f 91       	pop	r25
 61c:	8f 91       	pop	r24
 61e:	4f 91       	pop	r20
 620:	3f 91       	pop	r19
 622:	2f 91       	pop	r18
 624:	0f 90       	pop	r0
 626:	0f be       	out	0x3f, r0	; 63
 628:	0f 90       	pop	r0
 62a:	1f 90       	pop	r1
 62c:	18 95       	reti

0000062e <waitMS>:
}

void waitMS(uint16_t msec)
{
	// This function utilizes timer 0 and a sequence of delay loops to delay for the desired time
	TCNT0 = 5;
 62e:	25 e0       	ldi	r18, 0x05	; 5
 630:	26 bd       	out	0x26, r18	; 38
	// begin the timer
	TCCR0B |= (1 << CS01) | (1 << CS00);       // this will start the timer with a prescalar of 64
 632:	25 b5       	in	r18, 0x25	; 37
 634:	23 60       	ori	r18, 0x03	; 3
 636:	25 bd       	out	0x25, r18	; 37
	for (uint16_t i = 0; i < msec; i++){
 638:	00 97       	sbiw	r24, 0x00	; 0
 63a:	51 f0       	breq	.+20     	; 0x650 <waitMS+0x22>
 63c:	20 e0       	ldi	r18, 0x00	; 0
 63e:	30 e0       	ldi	r19, 0x00	; 0
		while(bit_is_clear(TIFR0, TOV0));
 640:	a8 9b       	sbis	0x15, 0	; 21
 642:	fe cf       	rjmp	.-4      	; 0x640 <waitMS+0x12>
		TIFR0 |= (1 << TOV0);                  // Clear the overflow flag by writing a 1 to it
 644:	a8 9a       	sbi	0x15, 0	; 21
{
	// This function utilizes timer 0 and a sequence of delay loops to delay for the desired time
	TCNT0 = 5;
	// begin the timer
	TCCR0B |= (1 << CS01) | (1 << CS00);       // this will start the timer with a prescalar of 64
	for (uint16_t i = 0; i < msec; i++){
 646:	2f 5f       	subi	r18, 0xFF	; 255
 648:	3f 4f       	sbci	r19, 0xFF	; 255
 64a:	82 17       	cp	r24, r18
 64c:	93 07       	cpc	r25, r19
 64e:	c1 f7       	brne	.-16     	; 0x640 <waitMS+0x12>
		*sfr |= val;
	}
	else             // This is for if I want the value to be a 0
	{
		val = ~(1 << bit);
		*sfr &= val;
 650:	85 b5       	in	r24, 0x25	; 37
 652:	8d 7f       	andi	r24, 0xFD	; 253
 654:	85 bd       	out	0x25, r24	; 37
 656:	85 b5       	in	r24, 0x25	; 37
 658:	8e 7f       	andi	r24, 0xFE	; 254
 65a:	85 bd       	out	0x25, r24	; 37
 65c:	08 95       	ret

0000065e <Initial>:
 *  @return void
 */
void Initial(void)
{
	////////////////////  Step 1: Initialize the Port directions  ///////////////////////////
	DDRE = (1 << CJC_CLK) | (1 << CJC_SS);              // This is the SS line for the CJC, so set to output
 65e:	8c e0       	ldi	r24, 0x0C	; 12
 660:	8d b9       	out	0x0d, r24	; 13
	assign_bit(&PORTE, CJC_CLK, 1);
 662:	41 e0       	ldi	r20, 0x01	; 1
 664:	62 e0       	ldi	r22, 0x02	; 2
 666:	8e e2       	ldi	r24, 0x2E	; 46
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	08 df       	rcall	.-496    	; 0x47c <assign_bit>
	assign_bit(&PORTE, CJC_CLK, 0);
 66c:	40 e0       	ldi	r20, 0x00	; 0
 66e:	62 e0       	ldi	r22, 0x02	; 2
 670:	8e e2       	ldi	r24, 0x2E	; 46
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	03 df       	rcall	.-506    	; 0x47c <assign_bit>
	assign_bit(&PORTE, CJC_CLK, 1);
 676:	41 e0       	ldi	r20, 0x01	; 1
 678:	62 e0       	ldi	r22, 0x02	; 2
 67a:	8e e2       	ldi	r24, 0x2E	; 46
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	fe de       	rcall	.-516    	; 0x47c <assign_bit>
	SSPASSIVE;                                          // Pull the pin high as we don't want to start the conversion
 680:	41 e0       	ldi	r20, 0x01	; 1
 682:	63 e0       	ldi	r22, 0x03	; 3
 684:	8e e2       	ldi	r24, 0x2E	; 46
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	f9 de       	rcall	.-526    	; 0x47c <assign_bit>
	
	// Now do port directions for the PWM outputs
	DDRB |= (1 << PB4) | (1 << PB5) | (1 << PB7);   // This sets the output for the pump, starter motor, and solenoids
 68a:	84 b1       	in	r24, 0x04	; 4
 68c:	80 6b       	ori	r24, 0xB0	; 176
 68e:	84 b9       	out	0x04, r24	; 4
	DDRE |= (1 << PE4);	
 690:	6c 9a       	sbi	0x0d, 4	; 13
	// The next things that need to be set are as follows
	// 1) Set MSPI mode of operation and SPI data mode to 0
	// 2) Enable the receiver and transmitter
	// 3) Set the baud rate.  This has to be done after the the transmitter has been enabled
	// 4) Set up timer 7 with a 0.1 second delay so that there is time in between sampling 
	UBRR0 = 0;
 692:	e4 ec       	ldi	r30, 0xC4	; 196
 694:	f0 e0       	ldi	r31, 0x00	; 0
 696:	11 82       	std	Z+1, r1	; 0x01
 698:	10 82       	st	Z, r1
	UCSR0C = (1<<UMSEL01)|(1<<UMSEL00);   // by not explicitly defining the mode, it should be in mode 0
 69a:	80 ec       	ldi	r24, 0xC0	; 192
 69c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
	UCSR0A = (1 << U2X0);
 6a0:	82 e0       	ldi	r24, 0x02	; 2
 6a2:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 6a6:	88 e1       	ldi	r24, 0x18	; 24
 6a8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
	UBRR0 = 7;    // This will have a baud rate of 1MHz with the 16MHz oscillator    THIS SECTION OF CODE NEEDS TO CHANGE
 6ac:	87 e0       	ldi	r24, 0x07	; 7
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	91 83       	std	Z+1, r25	; 0x01
 6b2:	80 83       	st	Z, r24

	
	///////////////////  Step 3: Initialize External Interrupt line  ////////////////////////
	// This will be used with the Hall effect sensor
	assign_bit(&DDRD, INT2, 0);              // Configure the PD2 pin as an input so that it can receive the signals
 6b4:	40 e0       	ldi	r20, 0x00	; 0
 6b6:	62 e0       	ldi	r22, 0x02	; 2
 6b8:	8a e2       	ldi	r24, 0x2A	; 42
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	df de       	rcall	.-578    	; 0x47c <assign_bit>
	hallCount = 0;
 6be:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <hallCount+0x1>
 6c2:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <hallCount>
	EICRA = (1 << ISC20) | (1 << ISC21);     // This will enable rising edge interrupts on INT2, see page 110 in datasheet
 6c6:	80 e3       	ldi	r24, 0x30	; 48
 6c8:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
	//UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);   // Now the USART should be ready to receive

			
	
	// Now initialize the timer for both the ECU communication error checking
	TCNT5 = ECU_timer_val;
 6cc:	8c ed       	ldi	r24, 0xDC	; 220
 6ce:	9b e0       	ldi	r25, 0x0B	; 11
 6d0:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <__TEXT_REGION_LENGTH__+0x700125>
 6d4:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
	TIMSK5 = (1 << TOIE5);     // enable overflow interrupts on this mode of timer 5
 6d8:	81 e0       	ldi	r24, 0x01	; 1
 6da:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
		
	///////////////////////  Step 6: Enable Hall Effect Timer  //////////////////////////////
	// This will be set to 0.25 seconds so there is a reasonable sampling period
	TCNT4 = HallTime;
 6de:	28 ec       	ldi	r18, 0xC8	; 200
 6e0:	3a e0       	ldi	r19, 0x0A	; 10
 6e2:	30 93 a5 00 	sts	0x00A5, r19	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7000a5>
 6e6:	20 93 a4 00 	sts	0x00A4, r18	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7000a4>
	TIMSK4 = (1 << TOIE4);                 // enable overflow interrupts for the Hall effect sensor timer
 6ea:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
	waitMS(195);                           // wait this portion of time so that the ECU comm and Hall effect interrupts are off phase
 6ee:	83 ec       	ldi	r24, 0xC3	; 195
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	9d df       	rcall	.-198    	; 0x62e <waitMS>
	TCCR4B = (1 << CS41) | (1 << CS40);    // start timer 4 with prescalar of 64
 6f4:	83 e0       	ldi	r24, 0x03	; 3
 6f6:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>


	////////////////////  Step 8: Fuel Flow Calculation factors  /////////////////////////////
	pulse_flow = (1.0 / density) * K_factor * max_time / 1000;   // this is the pulses expected per g/s in 0.25 sec
 6fa:	8c e9       	ldi	r24, 0x9C	; 156
 6fc:	95 ea       	ldi	r25, 0xA5	; 165
 6fe:	a1 ee       	ldi	r26, 0xE1	; 225
 700:	b1 e4       	ldi	r27, 0x41	; 65
 702:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <pulse_flow>
 706:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <pulse_flow+0x1>
 70a:	a0 93 1d 02 	sts	0x021D, r26	; 0x80021d <pulse_flow+0x2>
 70e:	b0 93 1e 02 	sts	0x021E, r27	; 0x80021e <pulse_flow+0x3>
	V_per_pulse = pump_m / pulse_flow;	
 712:	8f ee       	ldi	r24, 0xEF	; 239
 714:	9b e3       	ldi	r25, 0x3B	; 59
 716:	ae e5       	ldi	r26, 0x5E	; 94
 718:	bc e3       	ldi	r27, 0x3C	; 60
 71a:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <V_per_pulse>
 71e:	90 93 2d 02 	sts	0x022D, r25	; 0x80022d <V_per_pulse+0x1>
 722:	a0 93 2e 02 	sts	0x022E, r26	; 0x80022e <V_per_pulse+0x2>
 726:	b0 93 2f 02 	sts	0x022F, r27	; 0x80022f <V_per_pulse+0x3>

	
	//////////////////////  Step 9: Enable Global Interrupts  //////////////////////////////
	sei();
 72a:	78 94       	sei
	
	hasInterrupted = 0;
 72c:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <hasInterrupted>
	commandCode = 0;        // This means that that the next received char is a new command
 730:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <commandCode>
	ECUreceiveCount = 0;
 734:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <ECUreceiveCount>
 738:	08 95       	ret

0000073a <main>:
#include <avr/io.h>
#include "ESB_funcs.h"

int main(void)
{
    Initial();
 73a:	91 df       	rcall	.-222    	; 0x65e <Initial>
	while (1){
		EGT_collect();
 73c:	09 df       	rcall	.-494    	; 0x550 <EGT_collect>
 73e:	fe cf       	rjmp	.-4      	; 0x73c <main+0x2>

00000740 <__cmpsf2>:
 740:	40 d0       	rcall	.+128    	; 0x7c2 <__fp_cmp>
 742:	08 f4       	brcc	.+2      	; 0x746 <__cmpsf2+0x6>
 744:	81 e0       	ldi	r24, 0x01	; 1
 746:	08 95       	ret

00000748 <__floatunsisf>:
 748:	e8 94       	clt
 74a:	09 c0       	rjmp	.+18     	; 0x75e <__floatsisf+0x12>

0000074c <__floatsisf>:
 74c:	97 fb       	bst	r25, 7
 74e:	3e f4       	brtc	.+14     	; 0x75e <__floatsisf+0x12>
 750:	90 95       	com	r25
 752:	80 95       	com	r24
 754:	70 95       	com	r23
 756:	61 95       	neg	r22
 758:	7f 4f       	sbci	r23, 0xFF	; 255
 75a:	8f 4f       	sbci	r24, 0xFF	; 255
 75c:	9f 4f       	sbci	r25, 0xFF	; 255
 75e:	99 23       	and	r25, r25
 760:	a9 f0       	breq	.+42     	; 0x78c <__floatsisf+0x40>
 762:	f9 2f       	mov	r31, r25
 764:	96 e9       	ldi	r25, 0x96	; 150
 766:	bb 27       	eor	r27, r27
 768:	93 95       	inc	r25
 76a:	f6 95       	lsr	r31
 76c:	87 95       	ror	r24
 76e:	77 95       	ror	r23
 770:	67 95       	ror	r22
 772:	b7 95       	ror	r27
 774:	f1 11       	cpse	r31, r1
 776:	f8 cf       	rjmp	.-16     	; 0x768 <__floatsisf+0x1c>
 778:	fa f4       	brpl	.+62     	; 0x7b8 <__floatsisf+0x6c>
 77a:	bb 0f       	add	r27, r27
 77c:	11 f4       	brne	.+4      	; 0x782 <__floatsisf+0x36>
 77e:	60 ff       	sbrs	r22, 0
 780:	1b c0       	rjmp	.+54     	; 0x7b8 <__floatsisf+0x6c>
 782:	6f 5f       	subi	r22, 0xFF	; 255
 784:	7f 4f       	sbci	r23, 0xFF	; 255
 786:	8f 4f       	sbci	r24, 0xFF	; 255
 788:	9f 4f       	sbci	r25, 0xFF	; 255
 78a:	16 c0       	rjmp	.+44     	; 0x7b8 <__floatsisf+0x6c>
 78c:	88 23       	and	r24, r24
 78e:	11 f0       	breq	.+4      	; 0x794 <__floatsisf+0x48>
 790:	96 e9       	ldi	r25, 0x96	; 150
 792:	11 c0       	rjmp	.+34     	; 0x7b6 <__floatsisf+0x6a>
 794:	77 23       	and	r23, r23
 796:	21 f0       	breq	.+8      	; 0x7a0 <__floatsisf+0x54>
 798:	9e e8       	ldi	r25, 0x8E	; 142
 79a:	87 2f       	mov	r24, r23
 79c:	76 2f       	mov	r23, r22
 79e:	05 c0       	rjmp	.+10     	; 0x7aa <__floatsisf+0x5e>
 7a0:	66 23       	and	r22, r22
 7a2:	71 f0       	breq	.+28     	; 0x7c0 <__floatsisf+0x74>
 7a4:	96 e8       	ldi	r25, 0x86	; 134
 7a6:	86 2f       	mov	r24, r22
 7a8:	70 e0       	ldi	r23, 0x00	; 0
 7aa:	60 e0       	ldi	r22, 0x00	; 0
 7ac:	2a f0       	brmi	.+10     	; 0x7b8 <__floatsisf+0x6c>
 7ae:	9a 95       	dec	r25
 7b0:	66 0f       	add	r22, r22
 7b2:	77 1f       	adc	r23, r23
 7b4:	88 1f       	adc	r24, r24
 7b6:	da f7       	brpl	.-10     	; 0x7ae <__floatsisf+0x62>
 7b8:	88 0f       	add	r24, r24
 7ba:	96 95       	lsr	r25
 7bc:	87 95       	ror	r24
 7be:	97 f9       	bld	r25, 7
 7c0:	08 95       	ret

000007c2 <__fp_cmp>:
 7c2:	99 0f       	add	r25, r25
 7c4:	00 08       	sbc	r0, r0
 7c6:	55 0f       	add	r21, r21
 7c8:	aa 0b       	sbc	r26, r26
 7ca:	e0 e8       	ldi	r30, 0x80	; 128
 7cc:	fe ef       	ldi	r31, 0xFE	; 254
 7ce:	16 16       	cp	r1, r22
 7d0:	17 06       	cpc	r1, r23
 7d2:	e8 07       	cpc	r30, r24
 7d4:	f9 07       	cpc	r31, r25
 7d6:	c0 f0       	brcs	.+48     	; 0x808 <__fp_cmp+0x46>
 7d8:	12 16       	cp	r1, r18
 7da:	13 06       	cpc	r1, r19
 7dc:	e4 07       	cpc	r30, r20
 7de:	f5 07       	cpc	r31, r21
 7e0:	98 f0       	brcs	.+38     	; 0x808 <__fp_cmp+0x46>
 7e2:	62 1b       	sub	r22, r18
 7e4:	73 0b       	sbc	r23, r19
 7e6:	84 0b       	sbc	r24, r20
 7e8:	95 0b       	sbc	r25, r21
 7ea:	39 f4       	brne	.+14     	; 0x7fa <__fp_cmp+0x38>
 7ec:	0a 26       	eor	r0, r26
 7ee:	61 f0       	breq	.+24     	; 0x808 <__fp_cmp+0x46>
 7f0:	23 2b       	or	r18, r19
 7f2:	24 2b       	or	r18, r20
 7f4:	25 2b       	or	r18, r21
 7f6:	21 f4       	brne	.+8      	; 0x800 <__fp_cmp+0x3e>
 7f8:	08 95       	ret
 7fa:	0a 26       	eor	r0, r26
 7fc:	09 f4       	brne	.+2      	; 0x800 <__fp_cmp+0x3e>
 7fe:	a1 40       	sbci	r26, 0x01	; 1
 800:	a6 95       	lsr	r26
 802:	8f ef       	ldi	r24, 0xFF	; 255
 804:	81 1d       	adc	r24, r1
 806:	81 1d       	adc	r24, r1
 808:	08 95       	ret

0000080a <_exit>:
 80a:	f8 94       	cli

0000080c <__stop_program>:
 80c:	ff cf       	rjmp	.-2      	; 0x80c <__stop_program>
